// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: opentelemetry/proto/logs/v1/logs.proto
// Protobuf C++ Version: 5.29.5

#include "opentelemetry/proto/logs/v1/logs.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace opentelemetry {
namespace proto {
namespace logs {
namespace v1 {

inline constexpr LogRecord::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_ {0}, attributes_ {},
      severity_text_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      trace_id_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      span_id_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      body_ {nullptr}, time_unix_nano_ {::uint64_t {0u}},
      severity_number_ {static_cast<::opentelemetry::proto::logs::v1::SeverityNumber>(0)},
      dropped_attributes_count_ {0u}, observed_time_unix_nano_ {::uint64_t {0u}}, flags_ {0u} {
}

template <typename>
PROTOBUF_CONSTEXPR LogRecord::LogRecord(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LogRecordDefaultTypeInternal {
	PROTOBUF_CONSTEXPR LogRecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized {}) {
	}
	~LogRecordDefaultTypeInternal() {
	}
	union {
		LogRecord _instance;
	};
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogRecordDefaultTypeInternal
    _LogRecord_default_instance_;

inline constexpr ScopeLogs::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_ {0}, log_records_ {},
      schema_url_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      scope_ {nullptr} {
}

template <typename>
PROTOBUF_CONSTEXPR ScopeLogs::ScopeLogs(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ScopeLogsDefaultTypeInternal {
	PROTOBUF_CONSTEXPR ScopeLogsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized {}) {
	}
	~ScopeLogsDefaultTypeInternal() {
	}
	union {
		ScopeLogs _instance;
	};
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScopeLogsDefaultTypeInternal
    _ScopeLogs_default_instance_;

inline constexpr ResourceLogs::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_ {0}, scope_logs_ {},
      schema_url_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      resource_ {nullptr} {
}

template <typename>
PROTOBUF_CONSTEXPR ResourceLogs::ResourceLogs(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResourceLogsDefaultTypeInternal {
	PROTOBUF_CONSTEXPR ResourceLogsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized {}) {
	}
	~ResourceLogsDefaultTypeInternal() {
	}
	union {
		ResourceLogs _instance;
	};
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceLogsDefaultTypeInternal
    _ResourceLogs_default_instance_;

inline constexpr LogsData::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept : resource_logs_ {}, _cached_size_ {0} {
}

template <typename>
PROTOBUF_CONSTEXPR LogsData::LogsData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LogsDataDefaultTypeInternal {
	PROTOBUF_CONSTEXPR LogsDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized {}) {
	}
	~LogsDataDefaultTypeInternal() {
	}
	union {
		LogsData _instance;
	};
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogsDataDefaultTypeInternal
    _LogsData_default_instance_;
} // namespace v1
} // namespace logs
} // namespace proto
} // namespace opentelemetry
static const ::_pb::EnumDescriptor *file_level_enum_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor *
    *file_level_service_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto = nullptr;
const ::uint32_t
    TableStruct_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogsData, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        ~0u, // no _inlined_string_donated_
        ~0u, // no _split_
        ~0u, // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogsData, _impl_.resource_logs_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ResourceLogs, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ResourceLogs, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        ~0u, // no _inlined_string_donated_
        ~0u, // no _split_
        ~0u, // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ResourceLogs, _impl_.resource_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ResourceLogs, _impl_.scope_logs_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ResourceLogs, _impl_.schema_url_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ScopeLogs, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ScopeLogs, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        ~0u, // no _inlined_string_donated_
        ~0u, // no _split_
        ~0u, // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ScopeLogs, _impl_.scope_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ScopeLogs, _impl_.log_records_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ScopeLogs, _impl_.schema_url_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        ~0u, // no _inlined_string_donated_
        ~0u, // no _split_
        ~0u, // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.time_unix_nano_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.observed_time_unix_nano_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.severity_number_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.severity_text_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.body_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.attributes_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.dropped_attributes_count_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.trace_id_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.span_id_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, -1, sizeof(::opentelemetry::proto::logs::v1::LogsData)},
    {9, 20, -1, sizeof(::opentelemetry::proto::logs::v1::ResourceLogs)},
    {23, 34, -1, sizeof(::opentelemetry::proto::logs::v1::ScopeLogs)},
    {37, 55, -1, sizeof(::opentelemetry::proto::logs::v1::LogRecord)},
};
static const ::_pb::Message *const file_default_instances[] = {
    &::opentelemetry::proto::logs::v1::_LogsData_default_instance_._instance,
    &::opentelemetry::proto::logs::v1::_ResourceLogs_default_instance_._instance,
    &::opentelemetry::proto::logs::v1::_ScopeLogs_default_instance_._instance,
    &::opentelemetry::proto::logs::v1::_LogRecord_default_instance_._instance,
};
const char descriptor_table_protodef_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {"\n&opentelemetry/proto/logs/v1/logs.proto"
                       "\022\033opentelemetry.proto.logs.v1\032*opentelem"
                       "etry/proto/common/v1/common.proto\032.opent"
                       "elemetry/proto/resource/v1/resource.prot"
                       "o\"L\n\010LogsData\022@\n\rresource_logs\030\001 \003(\0132).o"
                       "pentelemetry.proto.logs.v1.ResourceLogs\""
                       "\243\001\n\014ResourceLogs\022;\n\010resource\030\001 \001(\0132).ope"
                       "ntelemetry.proto.resource.v1.Resource\022:\n"
                       "\nscope_logs\030\002 \003(\0132&.opentelemetry.proto."
                       "logs.v1.ScopeLogs\022\022\n\nschema_url\030\003 \001(\tJ\006\010"
                       "\350\007\020\351\007\"\240\001\n\tScopeLogs\022B\n\005scope\030\001 \001(\01323.ope"
                       "ntelemetry.proto.common.v1.Instrumentati"
                       "onScope\022;\n\013log_records\030\002 \003(\0132&.opentelem"
                       "etry.proto.logs.v1.LogRecord\022\022\n\nschema_u"
                       "rl\030\003 \001(\t\"\357\002\n\tLogRecord\022\026\n\016time_unix_nano"
                       "\030\001 \001(\006\022\037\n\027observed_time_unix_nano\030\013 \001(\006\022"
                       "D\n\017severity_number\030\002 \001(\0162+.opentelemetry"
                       ".proto.logs.v1.SeverityNumber\022\025\n\rseverit"
                       "y_text\030\003 \001(\t\0225\n\004body\030\005 \001(\0132\'.opentelemet"
                       "ry.proto.common.v1.AnyValue\022;\n\nattribute"
                       "s\030\006 \003(\0132\'.opentelemetry.proto.common.v1."
                       "KeyValue\022 \n\030dropped_attributes_count\030\007 \001"
                       "(\r\022\r\n\005flags\030\010 \001(\007\022\020\n\010trace_id\030\t \001(\014\022\017\n\007s"
                       "pan_id\030\n \001(\014J\004\010\004\020\005*\303\005\n\016SeverityNumber\022\037\n"
                       "\033SEVERITY_NUMBER_UNSPECIFIED\020\000\022\031\n\025SEVERI"
                       "TY_NUMBER_TRACE\020\001\022\032\n\026SEVERITY_NUMBER_TRA"
                       "CE2\020\002\022\032\n\026SEVERITY_NUMBER_TRACE3\020\003\022\032\n\026SEV"
                       "ERITY_NUMBER_TRACE4\020\004\022\031\n\025SEVERITY_NUMBER"
                       "_DEBUG\020\005\022\032\n\026SEVERITY_NUMBER_DEBUG2\020\006\022\032\n\026"
                       "SEVERITY_NUMBER_DEBUG3\020\007\022\032\n\026SEVERITY_NUM"
                       "BER_DEBUG4\020\010\022\030\n\024SEVERITY_NUMBER_INFO\020\t\022\031"
                       "\n\025SEVERITY_NUMBER_INFO2\020\n\022\031\n\025SEVERITY_NU"
                       "MBER_INFO3\020\013\022\031\n\025SEVERITY_NUMBER_INFO4\020\014\022"
                       "\030\n\024SEVERITY_NUMBER_WARN\020\r\022\031\n\025SEVERITY_NU"
                       "MBER_WARN2\020\016\022\031\n\025SEVERITY_NUMBER_WARN3\020\017\022"
                       "\031\n\025SEVERITY_NUMBER_WARN4\020\020\022\031\n\025SEVERITY_N"
                       "UMBER_ERROR\020\021\022\032\n\026SEVERITY_NUMBER_ERROR2\020"
                       "\022\022\032\n\026SEVERITY_NUMBER_ERROR3\020\023\022\032\n\026SEVERIT"
                       "Y_NUMBER_ERROR4\020\024\022\031\n\025SEVERITY_NUMBER_FAT"
                       "AL\020\025\022\032\n\026SEVERITY_NUMBER_FATAL2\020\026\022\032\n\026SEVE"
                       "RITY_NUMBER_FATAL3\020\027\022\032\n\026SEVERITY_NUMBER_"
                       "FATAL4\020\030*Y\n\016LogRecordFlags\022\037\n\033LOG_RECORD"
                       "_FLAGS_DO_NOT_USE\020\000\022&\n!LOG_RECORD_FLAGS_"
                       "TRACE_FLAGS_MASK\020\377\001Bs\n\036io.opentelemetry."
                       "proto.logs.v1B\tLogsProtoP\001Z&go.opentelem"
                       "etry.io/proto/otlp/logs/v1\252\002\033OpenTelemet"
                       "ry.Proto.Logs.V1b\006proto3"};
static const ::_pbi::DescriptorTable *const descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_deps[2] =
    {
        &::descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto,
};
static ::absl::once_flag descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto = {
    false,
    false,
    1864,
    descriptor_table_protodef_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto,
    "opentelemetry/proto/logs/v1/logs.proto",
    &descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_once,
    descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto::offsets,
    file_level_enum_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto,
    file_level_service_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto,
};
namespace opentelemetry {
namespace proto {
namespace logs {
namespace v1 {
const ::google::protobuf::EnumDescriptor *SeverityNumber_descriptor() {
	::google::protobuf::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto);
	return file_level_enum_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t SeverityNumber_internal_data_[] = {
    1638400u,
    0u,
};
bool SeverityNumber_IsValid(int value) {
	return 0 <= value && value <= 24;
}
const ::google::protobuf::EnumDescriptor *LogRecordFlags_descriptor() {
	::google::protobuf::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto);
	return file_level_enum_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t LogRecordFlags_internal_data_[] = {
    65536u,
    65536u,
    255u,
};
bool LogRecordFlags_IsValid(int value) {
	return ::_pbi::ValidateEnum(value, LogRecordFlags_internal_data_);
}
// ===================================================================

class LogsData::_Internal {
public:
};

LogsData::LogsData(::google::protobuf::Arena *arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
	SharedCtor(arena);
	// @@protoc_insertion_point(arena_constructor:opentelemetry.proto.logs.v1.LogsData)
}
inline PROTOBUF_NDEBUG_INLINE LogsData::Impl_::Impl_(::google::protobuf::internal::InternalVisibility visibility,
                                                     ::google::protobuf::Arena *arena, const Impl_ &from,
                                                     const ::opentelemetry::proto::logs::v1::LogsData &from_msg)
    : resource_logs_ {visibility, arena, from.resource_logs_}, _cached_size_ {0} {
}

LogsData::LogsData(::google::protobuf::Arena *arena, const LogsData &from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
	LogsData *const _this = this;
	(void)_this;
	_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
	new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

	// @@protoc_insertion_point(copy_constructor:opentelemetry.proto.logs.v1.LogsData)
}
inline PROTOBUF_NDEBUG_INLINE LogsData::Impl_::Impl_(::google::protobuf::internal::InternalVisibility visibility,
                                                     ::google::protobuf::Arena *arena)
    : resource_logs_ {visibility, arena}, _cached_size_ {0} {
}

inline void LogsData::SharedCtor(::_pb::Arena *arena) {
	new (&_impl_) Impl_(internal_visibility(), arena);
}
LogsData::~LogsData() {
	// @@protoc_insertion_point(destructor:opentelemetry.proto.logs.v1.LogsData)
	SharedDtor(*this);
}
inline void LogsData::SharedDtor(MessageLite &self) {
	LogsData &this_ = static_cast<LogsData &>(self);
	this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
	ABSL_DCHECK(this_.GetArena() == nullptr);
	this_._impl_.~Impl_();
}

inline void *LogsData::PlacementNew_(const void *, void *mem, ::google::protobuf::Arena *arena) {
	return ::new (mem) LogsData(arena);
}
constexpr auto LogsData::InternalNewImpl_() {
	constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
	    PROTOBUF_FIELD_OFFSET(LogsData, _impl_.resource_logs_) +
	        decltype(LogsData::_impl_.resource_logs_)::InternalGetArenaOffset(
	            ::google::protobuf::Message::internal_visibility()),
	});
	if (arena_bits.has_value()) {
		return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LogsData), alignof(LogsData), *arena_bits);
	} else {
		return ::google::protobuf::internal::MessageCreator(&LogsData::PlacementNew_, sizeof(LogsData),
		                                                    alignof(LogsData));
	}
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LogsData::_class_data_ = {
    ::google::protobuf::internal::ClassData {
        &_LogsData_default_instance_._instance,
        &_table_.header,
        nullptr, // OnDemandRegisterArenaDtor
        nullptr, // IsInitialized
        &LogsData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LogsData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LogsData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LogsData>(),
        &LogsData::ByteSizeLong,
        &LogsData::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LogsData, _impl_._cached_size_),
        false,
    },
    &LogsData::kDescriptorMethods, &descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto,
    nullptr, // tracker
};
const ::google::protobuf::internal::ClassData *LogsData::GetClassData() const {
	::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
	::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
	return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<0, 1, 1, 0, 2> LogsData::_table_ = {
    {
        0,    // no _has_bits_
        0,    // no _extensions_
        1, 0, // max_field_number, fast_idx_mask
        offsetof(decltype(_table_), field_lookup_table),
        4294967294, // skipmap
        offsetof(decltype(_table_), field_entries),
        1, // num_field_entries
        1, // num_aux_entries
        offsetof(decltype(_table_), aux_entries), _class_data_.base(),
        nullptr,                           // post_loop_handler
        ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
        ::_pbi::TcParser::GetTable<::opentelemetry::proto::logs::v1::LogsData>(), // to_prefetch
#endif                                                                            // PROTOBUF_PREFETCH_PARSE_TABLE
    },
    {{
        // repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
        {::_pbi::TcParser::FastMtR1, {10, 63, 0, PROTOBUF_FIELD_OFFSET(LogsData, _impl_.resource_logs_)}},
    }},
    {{65535, 65535}},
    {{
        // repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
        {PROTOBUF_FIELD_OFFSET(LogsData, _impl_.resource_logs_), 0, 0,
         (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    }},
    {{
        {::_pbi::TcParser::GetTable<::opentelemetry::proto::logs::v1::ResourceLogs>()},
    }},
    {{}},
};

PROTOBUF_NOINLINE void LogsData::Clear() {
	// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.logs.v1.LogsData)
	::google::protobuf::internal::TSanWrite(&_impl_);
	::uint32_t cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	_impl_.resource_logs_.Clear();
	_internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t *LogsData::_InternalSerialize(const MessageLite &base, ::uint8_t *target,
                                        ::google::protobuf::io::EpsCopyOutputStream *stream) {
	const LogsData &this_ = static_cast<const LogsData &>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t *LogsData::_InternalSerialize(::uint8_t *target, ::google::protobuf::io::EpsCopyOutputStream *stream) const {
	const LogsData &this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
       // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.logs.v1.LogsData)
	::uint32_t cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
	for (unsigned i = 0, n = static_cast<unsigned>(this_._internal_resource_logs_size()); i < n; i++) {
		const auto &repfield = this_._internal_resource_logs().Get(i);
		target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
		    1, repfield, repfield.GetCachedSize(), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
		target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
		    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
		        ::google::protobuf::UnknownFieldSet::default_instance),
		    target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.logs.v1.LogsData)
	return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t LogsData::ByteSizeLong(const MessageLite &base) {
	const LogsData &this_ = static_cast<const LogsData &>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t LogsData::ByteSizeLong() const {
	const LogsData &this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
       // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.logs.v1.LogsData)
	::size_t total_size = 0;

	::uint32_t cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	::_pbi::Prefetch5LinesFrom7Lines(&this_);
	{
		// repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
		{
			total_size += 1UL * this_._internal_resource_logs_size();
			for (const auto &msg : this_._internal_resource_logs()) {
				total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
			}
		}
	}
	return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void LogsData::MergeImpl(::google::protobuf::MessageLite &to_msg, const ::google::protobuf::MessageLite &from_msg) {
	auto *const _this = static_cast<LogsData *>(&to_msg);
	auto &from = static_cast<const LogsData &>(from_msg);
	// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.logs.v1.LogsData)
	ABSL_DCHECK_NE(&from, _this);
	::uint32_t cached_has_bits = 0;
	(void)cached_has_bits;

	_this->_internal_mutable_resource_logs()->MergeFrom(from._internal_resource_logs());
	_this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogsData::CopyFrom(const LogsData &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.logs.v1.LogsData)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void LogsData::InternalSwap(LogsData *PROTOBUF_RESTRICT other) {
	using std::swap;
	_internal_metadata_.InternalSwap(&other->_internal_metadata_);
	_impl_.resource_logs_.InternalSwap(&other->_impl_.resource_logs_);
}

::google::protobuf::Metadata LogsData::GetMetadata() const {
	return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ResourceLogs::_Internal {
public:
	using HasBits = decltype(std::declval<ResourceLogs>()._impl_._has_bits_);
	static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(ResourceLogs, _impl_._has_bits_);
};

void ResourceLogs::clear_resource() {
	::google::protobuf::internal::TSanWrite(&_impl_);
	if (_impl_.resource_ != nullptr)
		_impl_.resource_->Clear();
	_impl_._has_bits_[0] &= ~0x00000001u;
}
ResourceLogs::ResourceLogs(::google::protobuf::Arena *arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
	SharedCtor(arena);
	// @@protoc_insertion_point(arena_constructor:opentelemetry.proto.logs.v1.ResourceLogs)
}
inline PROTOBUF_NDEBUG_INLINE ResourceLogs::Impl_::Impl_(::google::protobuf::internal::InternalVisibility visibility,
                                                         ::google::protobuf::Arena *arena, const Impl_ &from,
                                                         const ::opentelemetry::proto::logs::v1::ResourceLogs &from_msg)
    : _has_bits_ {from._has_bits_}, _cached_size_ {0}, scope_logs_ {visibility, arena, from.scope_logs_},
      schema_url_(arena, from.schema_url_) {
}

ResourceLogs::ResourceLogs(::google::protobuf::Arena *arena, const ResourceLogs &from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
	ResourceLogs *const _this = this;
	(void)_this;
	_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
	new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
	::uint32_t cached_has_bits = _impl_._has_bits_[0];
	_impl_.resource_ = (cached_has_bits & 0x00000001u)
	                       ? ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::resource::v1::Resource>(
	                             arena, *from._impl_.resource_)
	                       : nullptr;

	// @@protoc_insertion_point(copy_constructor:opentelemetry.proto.logs.v1.ResourceLogs)
}
inline PROTOBUF_NDEBUG_INLINE ResourceLogs::Impl_::Impl_(::google::protobuf::internal::InternalVisibility visibility,
                                                         ::google::protobuf::Arena *arena)
    : _cached_size_ {0}, scope_logs_ {visibility, arena}, schema_url_(arena) {
}

inline void ResourceLogs::SharedCtor(::_pb::Arena *arena) {
	new (&_impl_) Impl_(internal_visibility(), arena);
	_impl_.resource_ = {};
}
ResourceLogs::~ResourceLogs() {
	// @@protoc_insertion_point(destructor:opentelemetry.proto.logs.v1.ResourceLogs)
	SharedDtor(*this);
}
inline void ResourceLogs::SharedDtor(MessageLite &self) {
	ResourceLogs &this_ = static_cast<ResourceLogs &>(self);
	this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
	ABSL_DCHECK(this_.GetArena() == nullptr);
	this_._impl_.schema_url_.Destroy();
	delete this_._impl_.resource_;
	this_._impl_.~Impl_();
}

inline void *ResourceLogs::PlacementNew_(const void *, void *mem, ::google::protobuf::Arena *arena) {
	return ::new (mem) ResourceLogs(arena);
}
constexpr auto ResourceLogs::InternalNewImpl_() {
	constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
	    PROTOBUF_FIELD_OFFSET(ResourceLogs, _impl_.scope_logs_) +
	        decltype(ResourceLogs::_impl_.scope_logs_)::InternalGetArenaOffset(
	            ::google::protobuf::Message::internal_visibility()),
	});
	if (arena_bits.has_value()) {
		return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ResourceLogs), alignof(ResourceLogs),
		                                                              *arena_bits);
	} else {
		return ::google::protobuf::internal::MessageCreator(&ResourceLogs::PlacementNew_, sizeof(ResourceLogs),
		                                                    alignof(ResourceLogs));
	}
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ResourceLogs::_class_data_ = {
    ::google::protobuf::internal::ClassData {
        &_ResourceLogs_default_instance_._instance,
        &_table_.header,
        nullptr, // OnDemandRegisterArenaDtor
        nullptr, // IsInitialized
        &ResourceLogs::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ResourceLogs>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ResourceLogs::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ResourceLogs>(),
        &ResourceLogs::ByteSizeLong,
        &ResourceLogs::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ResourceLogs, _impl_._cached_size_),
        false,
    },
    &ResourceLogs::kDescriptorMethods, &descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto,
    nullptr, // tracker
};
const ::google::protobuf::internal::ClassData *ResourceLogs::GetClassData() const {
	::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
	::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
	return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<2, 3, 2, 59, 2> ResourceLogs::_table_ =
    {
        {
            PROTOBUF_FIELD_OFFSET(ResourceLogs, _impl_._has_bits_),
            0,     // no _extensions_
            3, 24, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967288, // skipmap
            offsetof(decltype(_table_), field_entries),
            3, // num_field_entries
            2, // num_aux_entries
            offsetof(decltype(_table_), aux_entries), _class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::opentelemetry::proto::logs::v1::ResourceLogs>(), // to_prefetch
#endif // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            {::_pbi::TcParser::MiniParse, {}},
            // .opentelemetry.proto.resource.v1.Resource resource = 1;
            {::_pbi::TcParser::FastMtS1, {10, 0, 0, PROTOBUF_FIELD_OFFSET(ResourceLogs, _impl_.resource_)}},
            // repeated .opentelemetry.proto.logs.v1.ScopeLogs scope_logs = 2;
            {::_pbi::TcParser::FastMtR1, {18, 63, 1, PROTOBUF_FIELD_OFFSET(ResourceLogs, _impl_.scope_logs_)}},
            // string schema_url = 3;
            {::_pbi::TcParser::FastUS1, {26, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceLogs, _impl_.schema_url_)}},
        }},
        {{65535, 65535}},
        {{
            // .opentelemetry.proto.resource.v1.Resource resource = 1;
            {PROTOBUF_FIELD_OFFSET(ResourceLogs, _impl_.resource_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
            // repeated .opentelemetry.proto.logs.v1.ScopeLogs scope_logs = 2;
            {PROTOBUF_FIELD_OFFSET(ResourceLogs, _impl_.scope_logs_), -1, 1,
             (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
            // string schema_url = 3;
            {PROTOBUF_FIELD_OFFSET(ResourceLogs, _impl_.schema_url_), -1, 0,
             (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
        }},
        {{
            {::_pbi::TcParser::GetTable<::opentelemetry::proto::resource::v1::Resource>()},
            {::_pbi::TcParser::GetTable<::opentelemetry::proto::logs::v1::ScopeLogs>()},
        }},
        {{"\50\0\0\12\0\0\0\0"
          "opentelemetry.proto.logs.v1.ResourceLogs"
          "schema_url"}},
    };

PROTOBUF_NOINLINE void ResourceLogs::Clear() {
	// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.logs.v1.ResourceLogs)
	::google::protobuf::internal::TSanWrite(&_impl_);
	::uint32_t cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	_impl_.scope_logs_.Clear();
	_impl_.schema_url_.ClearToEmpty();
	cached_has_bits = _impl_._has_bits_[0];
	if (cached_has_bits & 0x00000001u) {
		ABSL_DCHECK(_impl_.resource_ != nullptr);
		_impl_.resource_->Clear();
	}
	_impl_._has_bits_.Clear();
	_internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t *ResourceLogs::_InternalSerialize(const MessageLite &base, ::uint8_t *target,
                                            ::google::protobuf::io::EpsCopyOutputStream *stream) {
	const ResourceLogs &this_ = static_cast<const ResourceLogs &>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t *ResourceLogs::_InternalSerialize(::uint8_t *target,
                                            ::google::protobuf::io::EpsCopyOutputStream *stream) const {
	const ResourceLogs &this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
       // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.logs.v1.ResourceLogs)
	::uint32_t cached_has_bits = 0;
	(void)cached_has_bits;

	cached_has_bits = this_._impl_._has_bits_[0];
	// .opentelemetry.proto.resource.v1.Resource resource = 1;
	if (cached_has_bits & 0x00000001u) {
		target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
		    1, *this_._impl_.resource_, this_._impl_.resource_->GetCachedSize(), target, stream);
	}

	// repeated .opentelemetry.proto.logs.v1.ScopeLogs scope_logs = 2;
	for (unsigned i = 0, n = static_cast<unsigned>(this_._internal_scope_logs_size()); i < n; i++) {
		const auto &repfield = this_._internal_scope_logs().Get(i);
		target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
		    2, repfield, repfield.GetCachedSize(), target, stream);
	}

	// string schema_url = 3;
	if (!this_._internal_schema_url().empty()) {
		const std::string &_s = this_._internal_schema_url();
		::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
		    _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
		    "opentelemetry.proto.logs.v1.ResourceLogs.schema_url");
		target = stream->WriteStringMaybeAliased(3, _s, target);
	}

	if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
		target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
		    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
		        ::google::protobuf::UnknownFieldSet::default_instance),
		    target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.logs.v1.ResourceLogs)
	return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ResourceLogs::ByteSizeLong(const MessageLite &base) {
	const ResourceLogs &this_ = static_cast<const ResourceLogs &>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t ResourceLogs::ByteSizeLong() const {
	const ResourceLogs &this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
       // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.logs.v1.ResourceLogs)
	::size_t total_size = 0;

	::uint32_t cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	::_pbi::Prefetch5LinesFrom7Lines(&this_);
	{// repeated .opentelemetry.proto.logs.v1.ScopeLogs scope_logs = 2;
	 {total_size += 1UL * this_._internal_scope_logs_size();
	for (const auto &msg : this_._internal_scope_logs()) {
		total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
	}
}
} // namespace v1
{
	// string schema_url = 3;
	if (!this_._internal_schema_url().empty()) {
		total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_schema_url());
	}
}
{
	// .opentelemetry.proto.resource.v1.Resource resource = 1;
	cached_has_bits = this_._impl_._has_bits_[0];
	if (cached_has_bits & 0x00000001u) {
		total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.resource_);
	}
}
return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
} // namespace logs

void ResourceLogs::MergeImpl(::google::protobuf::MessageLite &to_msg, const ::google::protobuf::MessageLite &from_msg) {
	auto *const _this = static_cast<ResourceLogs *>(&to_msg);
	auto &from = static_cast<const ResourceLogs &>(from_msg);
	::google::protobuf::Arena *arena = _this->GetArena();
	// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.logs.v1.ResourceLogs)
	ABSL_DCHECK_NE(&from, _this);
	::uint32_t cached_has_bits = 0;
	(void)cached_has_bits;

	_this->_internal_mutable_scope_logs()->MergeFrom(from._internal_scope_logs());
	if (!from._internal_schema_url().empty()) {
		_this->_internal_set_schema_url(from._internal_schema_url());
	}
	cached_has_bits = from._impl_._has_bits_[0];
	if (cached_has_bits & 0x00000001u) {
		ABSL_DCHECK(from._impl_.resource_ != nullptr);
		if (_this->_impl_.resource_ == nullptr) {
			_this->_impl_.resource_ =
			    ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::resource::v1::Resource>(
			        arena, *from._impl_.resource_);
		} else {
			_this->_impl_.resource_->MergeFrom(*from._impl_.resource_);
		}
	}
	_this->_impl_._has_bits_[0] |= cached_has_bits;
	_this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceLogs::CopyFrom(const ResourceLogs &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.logs.v1.ResourceLogs)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void ResourceLogs::InternalSwap(ResourceLogs *PROTOBUF_RESTRICT other) {
	using std::swap;
	auto *arena = GetArena();
	ABSL_DCHECK_EQ(arena, other->GetArena());
	_internal_metadata_.InternalSwap(&other->_internal_metadata_);
	swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
	_impl_.scope_logs_.InternalSwap(&other->_impl_.scope_logs_);
	::_pbi::ArenaStringPtr::InternalSwap(&_impl_.schema_url_, &other->_impl_.schema_url_, arena);
	swap(_impl_.resource_, other->_impl_.resource_);
}

::google::protobuf::Metadata ResourceLogs::GetMetadata() const {
	return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ScopeLogs::_Internal {
public:
	using HasBits = decltype(std::declval<ScopeLogs>()._impl_._has_bits_);
	static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(ScopeLogs, _impl_._has_bits_);
};

void ScopeLogs::clear_scope() {
	::google::protobuf::internal::TSanWrite(&_impl_);
	if (_impl_.scope_ != nullptr)
		_impl_.scope_->Clear();
	_impl_._has_bits_[0] &= ~0x00000001u;
}
ScopeLogs::ScopeLogs(::google::protobuf::Arena *arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
	SharedCtor(arena);
	// @@protoc_insertion_point(arena_constructor:opentelemetry.proto.logs.v1.ScopeLogs)
}
inline PROTOBUF_NDEBUG_INLINE ScopeLogs::Impl_::Impl_(::google::protobuf::internal::InternalVisibility visibility,
                                                      ::google::protobuf::Arena *arena, const Impl_ &from,
                                                      const ::opentelemetry::proto::logs::v1::ScopeLogs &from_msg)
    : _has_bits_ {from._has_bits_}, _cached_size_ {0}, log_records_ {visibility, arena, from.log_records_},
      schema_url_(arena, from.schema_url_) {
}

ScopeLogs::ScopeLogs(::google::protobuf::Arena *arena, const ScopeLogs &from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
	ScopeLogs *const _this = this;
	(void)_this;
	_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
	new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
	::uint32_t cached_has_bits = _impl_._has_bits_[0];
	_impl_.scope_ =
	    (cached_has_bits & 0x00000001u)
	        ? ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::common::v1::InstrumentationScope>(
	              arena, *from._impl_.scope_)
	        : nullptr;

	// @@protoc_insertion_point(copy_constructor:opentelemetry.proto.logs.v1.ScopeLogs)
}
inline PROTOBUF_NDEBUG_INLINE ScopeLogs::Impl_::Impl_(::google::protobuf::internal::InternalVisibility visibility,
                                                      ::google::protobuf::Arena *arena)
    : _cached_size_ {0}, log_records_ {visibility, arena}, schema_url_(arena) {
}

inline void ScopeLogs::SharedCtor(::_pb::Arena *arena) {
	new (&_impl_) Impl_(internal_visibility(), arena);
	_impl_.scope_ = {};
}
ScopeLogs::~ScopeLogs() {
	// @@protoc_insertion_point(destructor:opentelemetry.proto.logs.v1.ScopeLogs)
	SharedDtor(*this);
}
inline void ScopeLogs::SharedDtor(MessageLite &self) {
	ScopeLogs &this_ = static_cast<ScopeLogs &>(self);
	this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
	ABSL_DCHECK(this_.GetArena() == nullptr);
	this_._impl_.schema_url_.Destroy();
	delete this_._impl_.scope_;
	this_._impl_.~Impl_();
}

inline void *ScopeLogs::PlacementNew_(const void *, void *mem, ::google::protobuf::Arena *arena) {
	return ::new (mem) ScopeLogs(arena);
}
constexpr auto ScopeLogs::InternalNewImpl_() {
	constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
	    PROTOBUF_FIELD_OFFSET(ScopeLogs, _impl_.log_records_) +
	        decltype(ScopeLogs::_impl_.log_records_)::InternalGetArenaOffset(
	            ::google::protobuf::Message::internal_visibility()),
	});
	if (arena_bits.has_value()) {
		return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ScopeLogs), alignof(ScopeLogs),
		                                                              *arena_bits);
	} else {
		return ::google::protobuf::internal::MessageCreator(&ScopeLogs::PlacementNew_, sizeof(ScopeLogs),
		                                                    alignof(ScopeLogs));
	}
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ScopeLogs::_class_data_ = {
    ::google::protobuf::internal::ClassData {
        &_ScopeLogs_default_instance_._instance,
        &_table_.header,
        nullptr, // OnDemandRegisterArenaDtor
        nullptr, // IsInitialized
        &ScopeLogs::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ScopeLogs>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ScopeLogs::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ScopeLogs>(),
        &ScopeLogs::ByteSizeLong,
        &ScopeLogs::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ScopeLogs, _impl_._cached_size_),
        false,
    },
    &ScopeLogs::kDescriptorMethods, &descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto,
    nullptr, // tracker
};
const ::google::protobuf::internal::ClassData *ScopeLogs::GetClassData() const {
	::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
	::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
	return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<2, 3, 2, 56, 2> ScopeLogs::_table_ = {
    {
        PROTOBUF_FIELD_OFFSET(ScopeLogs, _impl_._has_bits_),
        0,     // no _extensions_
        3, 24, // max_field_number, fast_idx_mask
        offsetof(decltype(_table_), field_lookup_table),
        4294967288, // skipmap
        offsetof(decltype(_table_), field_entries),
        3, // num_field_entries
        2, // num_aux_entries
        offsetof(decltype(_table_), aux_entries), _class_data_.base(),
        nullptr,                           // post_loop_handler
        ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
        ::_pbi::TcParser::GetTable<::opentelemetry::proto::logs::v1::ScopeLogs>(), // to_prefetch
#endif                                                                             // PROTOBUF_PREFETCH_PARSE_TABLE
    },
    {{
        {::_pbi::TcParser::MiniParse, {}},
        // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
        {::_pbi::TcParser::FastMtS1, {10, 0, 0, PROTOBUF_FIELD_OFFSET(ScopeLogs, _impl_.scope_)}},
        // repeated .opentelemetry.proto.logs.v1.LogRecord log_records = 2;
        {::_pbi::TcParser::FastMtR1, {18, 63, 1, PROTOBUF_FIELD_OFFSET(ScopeLogs, _impl_.log_records_)}},
        // string schema_url = 3;
        {::_pbi::TcParser::FastUS1, {26, 63, 0, PROTOBUF_FIELD_OFFSET(ScopeLogs, _impl_.schema_url_)}},
    }},
    {{65535, 65535}},
    {{
        // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
        {PROTOBUF_FIELD_OFFSET(ScopeLogs, _impl_.scope_), _Internal::kHasBitsOffset + 0, 0,
         (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
        // repeated .opentelemetry.proto.logs.v1.LogRecord log_records = 2;
        {PROTOBUF_FIELD_OFFSET(ScopeLogs, _impl_.log_records_), -1, 1,
         (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
        // string schema_url = 3;
        {PROTOBUF_FIELD_OFFSET(ScopeLogs, _impl_.schema_url_), -1, 0,
         (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    }},
    {{
        {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::InstrumentationScope>()},
        {::_pbi::TcParser::GetTable<::opentelemetry::proto::logs::v1::LogRecord>()},
    }},
    {{"\45\0\0\12\0\0\0\0"
      "opentelemetry.proto.logs.v1.ScopeLogs"
      "schema_url"}},
};

PROTOBUF_NOINLINE void ScopeLogs::Clear() {
	// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.logs.v1.ScopeLogs)
	::google::protobuf::internal::TSanWrite(&_impl_);
	::uint32_t cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	_impl_.log_records_.Clear();
	_impl_.schema_url_.ClearToEmpty();
	cached_has_bits = _impl_._has_bits_[0];
	if (cached_has_bits & 0x00000001u) {
		ABSL_DCHECK(_impl_.scope_ != nullptr);
		_impl_.scope_->Clear();
	}
	_impl_._has_bits_.Clear();
	_internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t *ScopeLogs::_InternalSerialize(const MessageLite &base, ::uint8_t *target,
                                         ::google::protobuf::io::EpsCopyOutputStream *stream) {
	const ScopeLogs &this_ = static_cast<const ScopeLogs &>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t *ScopeLogs::_InternalSerialize(::uint8_t *target, ::google::protobuf::io::EpsCopyOutputStream *stream) const {
	const ScopeLogs &this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
       // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.logs.v1.ScopeLogs)
	::uint32_t cached_has_bits = 0;
	(void)cached_has_bits;

	cached_has_bits = this_._impl_._has_bits_[0];
	// .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
	if (cached_has_bits & 0x00000001u) {
		target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
		    1, *this_._impl_.scope_, this_._impl_.scope_->GetCachedSize(), target, stream);
	}

	// repeated .opentelemetry.proto.logs.v1.LogRecord log_records = 2;
	for (unsigned i = 0, n = static_cast<unsigned>(this_._internal_log_records_size()); i < n; i++) {
		const auto &repfield = this_._internal_log_records().Get(i);
		target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
		    2, repfield, repfield.GetCachedSize(), target, stream);
	}

	// string schema_url = 3;
	if (!this_._internal_schema_url().empty()) {
		const std::string &_s = this_._internal_schema_url();
		::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
		    _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
		    "opentelemetry.proto.logs.v1.ScopeLogs.schema_url");
		target = stream->WriteStringMaybeAliased(3, _s, target);
	}

	if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
		target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
		    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
		        ::google::protobuf::UnknownFieldSet::default_instance),
		    target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.logs.v1.ScopeLogs)
	return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ScopeLogs::ByteSizeLong(const MessageLite &base) {
	const ScopeLogs &this_ = static_cast<const ScopeLogs &>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t ScopeLogs::ByteSizeLong() const {
	const ScopeLogs &this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
       // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.logs.v1.ScopeLogs)
	::size_t total_size = 0;

	::uint32_t cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	::_pbi::Prefetch5LinesFrom7Lines(&this_);
	{// repeated .opentelemetry.proto.logs.v1.LogRecord log_records = 2;
	 {total_size += 1UL * this_._internal_log_records_size();
	for (const auto &msg : this_._internal_log_records()) {
		total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
	}
}
} // namespace proto
{
	// string schema_url = 3;
	if (!this_._internal_schema_url().empty()) {
		total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_schema_url());
	}
}
{
	// .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
	cached_has_bits = this_._impl_._has_bits_[0];
	if (cached_has_bits & 0x00000001u) {
		total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.scope_);
	}
}
return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
} // namespace opentelemetry

void ScopeLogs::MergeImpl(::google::protobuf::MessageLite &to_msg, const ::google::protobuf::MessageLite &from_msg) {
	auto *const _this = static_cast<ScopeLogs *>(&to_msg);
	auto &from = static_cast<const ScopeLogs &>(from_msg);
	::google::protobuf::Arena *arena = _this->GetArena();
	// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.logs.v1.ScopeLogs)
	ABSL_DCHECK_NE(&from, _this);
	::uint32_t cached_has_bits = 0;
	(void)cached_has_bits;

	_this->_internal_mutable_log_records()->MergeFrom(from._internal_log_records());
	if (!from._internal_schema_url().empty()) {
		_this->_internal_set_schema_url(from._internal_schema_url());
	}
	cached_has_bits = from._impl_._has_bits_[0];
	if (cached_has_bits & 0x00000001u) {
		ABSL_DCHECK(from._impl_.scope_ != nullptr);
		if (_this->_impl_.scope_ == nullptr) {
			_this->_impl_.scope_ =
			    ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::common::v1::InstrumentationScope>(
			        arena, *from._impl_.scope_);
		} else {
			_this->_impl_.scope_->MergeFrom(*from._impl_.scope_);
		}
	}
	_this->_impl_._has_bits_[0] |= cached_has_bits;
	_this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ScopeLogs::CopyFrom(const ScopeLogs &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.logs.v1.ScopeLogs)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void ScopeLogs::InternalSwap(ScopeLogs *PROTOBUF_RESTRICT other) {
	using std::swap;
	auto *arena = GetArena();
	ABSL_DCHECK_EQ(arena, other->GetArena());
	_internal_metadata_.InternalSwap(&other->_internal_metadata_);
	swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
	_impl_.log_records_.InternalSwap(&other->_impl_.log_records_);
	::_pbi::ArenaStringPtr::InternalSwap(&_impl_.schema_url_, &other->_impl_.schema_url_, arena);
	swap(_impl_.scope_, other->_impl_.scope_);
}

::google::protobuf::Metadata ScopeLogs::GetMetadata() const {
	return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LogRecord::_Internal {
public:
	using HasBits = decltype(std::declval<LogRecord>()._impl_._has_bits_);
	static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(LogRecord, _impl_._has_bits_);
};

void LogRecord::clear_body() {
	::google::protobuf::internal::TSanWrite(&_impl_);
	if (_impl_.body_ != nullptr)
		_impl_.body_->Clear();
	_impl_._has_bits_[0] &= ~0x00000001u;
}
void LogRecord::clear_attributes() {
	::google::protobuf::internal::TSanWrite(&_impl_);
	_impl_.attributes_.Clear();
}
LogRecord::LogRecord(::google::protobuf::Arena *arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
	SharedCtor(arena);
	// @@protoc_insertion_point(arena_constructor:opentelemetry.proto.logs.v1.LogRecord)
}
inline PROTOBUF_NDEBUG_INLINE LogRecord::Impl_::Impl_(::google::protobuf::internal::InternalVisibility visibility,
                                                      ::google::protobuf::Arena *arena, const Impl_ &from,
                                                      const ::opentelemetry::proto::logs::v1::LogRecord &from_msg)
    : _has_bits_ {from._has_bits_}, _cached_size_ {0}, attributes_ {visibility, arena, from.attributes_},
      severity_text_(arena, from.severity_text_), trace_id_(arena, from.trace_id_), span_id_(arena, from.span_id_) {
}

LogRecord::LogRecord(::google::protobuf::Arena *arena, const LogRecord &from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
	LogRecord *const _this = this;
	(void)_this;
	_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
	new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
	::uint32_t cached_has_bits = _impl_._has_bits_[0];
	_impl_.body_ = (cached_has_bits & 0x00000001u)
	                   ? ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::common::v1::AnyValue>(
	                         arena, *from._impl_.body_)
	                   : nullptr;
	::memcpy(reinterpret_cast<char *>(&_impl_) + offsetof(Impl_, time_unix_nano_),
	         reinterpret_cast<const char *>(&from._impl_) + offsetof(Impl_, time_unix_nano_),
	         offsetof(Impl_, flags_) - offsetof(Impl_, time_unix_nano_) + sizeof(Impl_::flags_));

	// @@protoc_insertion_point(copy_constructor:opentelemetry.proto.logs.v1.LogRecord)
}
inline PROTOBUF_NDEBUG_INLINE LogRecord::Impl_::Impl_(::google::protobuf::internal::InternalVisibility visibility,
                                                      ::google::protobuf::Arena *arena)
    : _cached_size_ {0}, attributes_ {visibility, arena}, severity_text_(arena), trace_id_(arena), span_id_(arena) {
}

inline void LogRecord::SharedCtor(::_pb::Arena *arena) {
	new (&_impl_) Impl_(internal_visibility(), arena);
	::memset(reinterpret_cast<char *>(&_impl_) + offsetof(Impl_, body_), 0,
	         offsetof(Impl_, flags_) - offsetof(Impl_, body_) + sizeof(Impl_::flags_));
}
LogRecord::~LogRecord() {
	// @@protoc_insertion_point(destructor:opentelemetry.proto.logs.v1.LogRecord)
	SharedDtor(*this);
}
inline void LogRecord::SharedDtor(MessageLite &self) {
	LogRecord &this_ = static_cast<LogRecord &>(self);
	this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
	ABSL_DCHECK(this_.GetArena() == nullptr);
	this_._impl_.severity_text_.Destroy();
	this_._impl_.trace_id_.Destroy();
	this_._impl_.span_id_.Destroy();
	delete this_._impl_.body_;
	this_._impl_.~Impl_();
}

inline void *LogRecord::PlacementNew_(const void *, void *mem, ::google::protobuf::Arena *arena) {
	return ::new (mem) LogRecord(arena);
}
constexpr auto LogRecord::InternalNewImpl_() {
	constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
	    PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.attributes_) +
	        decltype(LogRecord::_impl_.attributes_)::InternalGetArenaOffset(
	            ::google::protobuf::Message::internal_visibility()),
	});
	if (arena_bits.has_value()) {
		return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(LogRecord), alignof(LogRecord),
		                                                              *arena_bits);
	} else {
		return ::google::protobuf::internal::MessageCreator(&LogRecord::PlacementNew_, sizeof(LogRecord),
		                                                    alignof(LogRecord));
	}
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LogRecord::_class_data_ = {
    ::google::protobuf::internal::ClassData {
        &_LogRecord_default_instance_._instance,
        &_table_.header,
        nullptr, // OnDemandRegisterArenaDtor
        nullptr, // IsInitialized
        &LogRecord::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LogRecord>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LogRecord::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LogRecord>(),
        &LogRecord::ByteSizeLong,
        &LogRecord::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LogRecord, _impl_._cached_size_),
        false,
    },
    &LogRecord::kDescriptorMethods, &descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto,
    nullptr, // tracker
};
const ::google::protobuf::internal::ClassData *LogRecord::GetClassData() const {
	::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
	::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
	return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<4, 10, 2, 67, 2> LogRecord::_table_ = {
    {
        PROTOBUF_FIELD_OFFSET(LogRecord, _impl_._has_bits_),
        0,       // no _extensions_
        11, 120, // max_field_number, fast_idx_mask
        offsetof(decltype(_table_), field_lookup_table),
        4294965256, // skipmap
        offsetof(decltype(_table_), field_entries),
        10, // num_field_entries
        2,  // num_aux_entries
        offsetof(decltype(_table_), aux_entries), _class_data_.base(),
        nullptr,                           // post_loop_handler
        ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
        ::_pbi::TcParser::GetTable<::opentelemetry::proto::logs::v1::LogRecord>(), // to_prefetch
#endif                                                                             // PROTOBUF_PREFETCH_PARSE_TABLE
    },
    {{
        {::_pbi::TcParser::MiniParse, {}},
        // fixed64 time_unix_nano = 1;
        {::_pbi::TcParser::FastF64S1, {9, 63, 0, PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.time_unix_nano_)}},
        // .opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;
        {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LogRecord, _impl_.severity_number_), 63>(),
         {16, 63, 0, PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.severity_number_)}},
        // string severity_text = 3;
        {::_pbi::TcParser::FastUS1, {26, 63, 0, PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.severity_text_)}},
        {::_pbi::TcParser::MiniParse, {}},
        // .opentelemetry.proto.common.v1.AnyValue body = 5;
        {::_pbi::TcParser::FastMtS1, {42, 0, 0, PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.body_)}},
        // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 6;
        {::_pbi::TcParser::FastMtR1, {50, 63, 1, PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.attributes_)}},
        // uint32 dropped_attributes_count = 7;
        {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LogRecord, _impl_.dropped_attributes_count_),
                                                63>(),
         {56, 63, 0, PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.dropped_attributes_count_)}},
        // fixed32 flags = 8;
        {::_pbi::TcParser::FastF32S1, {69, 63, 0, PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.flags_)}},
        // bytes trace_id = 9;
        {::_pbi::TcParser::FastBS1, {74, 63, 0, PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.trace_id_)}},
        // bytes span_id = 10;
        {::_pbi::TcParser::FastBS1, {82, 63, 0, PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.span_id_)}},
        // fixed64 observed_time_unix_nano = 11;
        {::_pbi::TcParser::FastF64S1, {89, 63, 0, PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.observed_time_unix_nano_)}},
        {::_pbi::TcParser::MiniParse, {}},
        {::_pbi::TcParser::MiniParse, {}},
        {::_pbi::TcParser::MiniParse, {}},
        {::_pbi::TcParser::MiniParse, {}},
    }},
    {{65535, 65535}},
    {{
        // fixed64 time_unix_nano = 1;
        {PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.time_unix_nano_), -1, 0, (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
        // .opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;
        {PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.severity_number_), -1, 0, (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
        // string severity_text = 3;
        {PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.severity_text_), -1, 0,
         (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
        // .opentelemetry.proto.common.v1.AnyValue body = 5;
        {PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.body_), _Internal::kHasBitsOffset + 0, 0,
         (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
        // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 6;
        {PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.attributes_), -1, 1,
         (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
        // uint32 dropped_attributes_count = 7;
        {PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.dropped_attributes_count_), -1, 0,
         (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
        // fixed32 flags = 8;
        {PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.flags_), -1, 0, (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
        // bytes trace_id = 9;
        {PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.trace_id_), -1, 0,
         (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
        // bytes span_id = 10;
        {PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.span_id_), -1, 0,
         (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
        // fixed64 observed_time_unix_nano = 11;
        {PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.observed_time_unix_nano_), -1, 0,
         (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    }},
    {{
        {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::AnyValue>()},
        {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::KeyValue>()},
    }},
    {{"\45\0\0\15\0\0\0\0\0\0\0\0\0\0\0\0"
      "opentelemetry.proto.logs.v1.LogRecord"
      "severity_text"}},
};

PROTOBUF_NOINLINE void LogRecord::Clear() {
	// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.logs.v1.LogRecord)
	::google::protobuf::internal::TSanWrite(&_impl_);
	::uint32_t cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	_impl_.attributes_.Clear();
	_impl_.severity_text_.ClearToEmpty();
	_impl_.trace_id_.ClearToEmpty();
	_impl_.span_id_.ClearToEmpty();
	cached_has_bits = _impl_._has_bits_[0];
	if (cached_has_bits & 0x00000001u) {
		ABSL_DCHECK(_impl_.body_ != nullptr);
		_impl_.body_->Clear();
	}
	::memset(&_impl_.time_unix_nano_, 0,
	         static_cast<::size_t>(reinterpret_cast<char *>(&_impl_.flags_) -
	                               reinterpret_cast<char *>(&_impl_.time_unix_nano_)) +
	             sizeof(_impl_.flags_));
	_impl_._has_bits_.Clear();
	_internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t *LogRecord::_InternalSerialize(const MessageLite &base, ::uint8_t *target,
                                         ::google::protobuf::io::EpsCopyOutputStream *stream) {
	const LogRecord &this_ = static_cast<const LogRecord &>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t *LogRecord::_InternalSerialize(::uint8_t *target, ::google::protobuf::io::EpsCopyOutputStream *stream) const {
	const LogRecord &this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
       // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.logs.v1.LogRecord)
	::uint32_t cached_has_bits = 0;
	(void)cached_has_bits;

	// fixed64 time_unix_nano = 1;
	if (this_._internal_time_unix_nano() != 0) {
		target = stream->EnsureSpace(target);
		target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this_._internal_time_unix_nano(), target);
	}

	// .opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;
	if (this_._internal_severity_number() != 0) {
		target = stream->EnsureSpace(target);
		target = ::_pbi::WireFormatLite::WriteEnumToArray(2, this_._internal_severity_number(), target);
	}

	// string severity_text = 3;
	if (!this_._internal_severity_text().empty()) {
		const std::string &_s = this_._internal_severity_text();
		::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
		    _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
		    "opentelemetry.proto.logs.v1.LogRecord.severity_text");
		target = stream->WriteStringMaybeAliased(3, _s, target);
	}

	cached_has_bits = this_._impl_._has_bits_[0];
	// .opentelemetry.proto.common.v1.AnyValue body = 5;
	if (cached_has_bits & 0x00000001u) {
		target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
		    5, *this_._impl_.body_, this_._impl_.body_->GetCachedSize(), target, stream);
	}

	// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 6;
	for (unsigned i = 0, n = static_cast<unsigned>(this_._internal_attributes_size()); i < n; i++) {
		const auto &repfield = this_._internal_attributes().Get(i);
		target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
		    6, repfield, repfield.GetCachedSize(), target, stream);
	}

	// uint32 dropped_attributes_count = 7;
	if (this_._internal_dropped_attributes_count() != 0) {
		target = stream->EnsureSpace(target);
		target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this_._internal_dropped_attributes_count(), target);
	}

	// fixed32 flags = 8;
	if (this_._internal_flags() != 0) {
		target = stream->EnsureSpace(target);
		target = ::_pbi::WireFormatLite::WriteFixed32ToArray(8, this_._internal_flags(), target);
	}

	// bytes trace_id = 9;
	if (!this_._internal_trace_id().empty()) {
		const std::string &_s = this_._internal_trace_id();
		target = stream->WriteBytesMaybeAliased(9, _s, target);
	}

	// bytes span_id = 10;
	if (!this_._internal_span_id().empty()) {
		const std::string &_s = this_._internal_span_id();
		target = stream->WriteBytesMaybeAliased(10, _s, target);
	}

	// fixed64 observed_time_unix_nano = 11;
	if (this_._internal_observed_time_unix_nano() != 0) {
		target = stream->EnsureSpace(target);
		target = ::_pbi::WireFormatLite::WriteFixed64ToArray(11, this_._internal_observed_time_unix_nano(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
		target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
		    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
		        ::google::protobuf::UnknownFieldSet::default_instance),
		    target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.logs.v1.LogRecord)
	return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t LogRecord::ByteSizeLong(const MessageLite &base) {
	const LogRecord &this_ = static_cast<const LogRecord &>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t LogRecord::ByteSizeLong() const {
	const LogRecord &this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
       // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.logs.v1.LogRecord)
	::size_t total_size = 0;

	::uint32_t cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	::_pbi::Prefetch5LinesFrom7Lines(&this_);
	{// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 6;
	 {total_size += 1UL * this_._internal_attributes_size();
	for (const auto &msg : this_._internal_attributes()) {
		total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
	}
}
}
{
	// string severity_text = 3;
	if (!this_._internal_severity_text().empty()) {
		total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_severity_text());
	}
	// bytes trace_id = 9;
	if (!this_._internal_trace_id().empty()) {
		total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this_._internal_trace_id());
	}
	// bytes span_id = 10;
	if (!this_._internal_span_id().empty()) {
		total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this_._internal_span_id());
	}
}
{
	// .opentelemetry.proto.common.v1.AnyValue body = 5;
	cached_has_bits = this_._impl_._has_bits_[0];
	if (cached_has_bits & 0x00000001u) {
		total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.body_);
	}
}
{
	// fixed64 time_unix_nano = 1;
	if (this_._internal_time_unix_nano() != 0) {
		total_size += 9;
	}
	// .opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;
	if (this_._internal_severity_number() != 0) {
		total_size += 1 + ::_pbi::WireFormatLite::EnumSize(this_._internal_severity_number());
	}
	// uint32 dropped_attributes_count = 7;
	if (this_._internal_dropped_attributes_count() != 0) {
		total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this_._internal_dropped_attributes_count());
	}
	// fixed64 observed_time_unix_nano = 11;
	if (this_._internal_observed_time_unix_nano() != 0) {
		total_size += 9;
	}
	// fixed32 flags = 8;
	if (this_._internal_flags() != 0) {
		total_size += 5;
	}
}
return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void LogRecord::MergeImpl(::google::protobuf::MessageLite &to_msg, const ::google::protobuf::MessageLite &from_msg) {
	auto *const _this = static_cast<LogRecord *>(&to_msg);
	auto &from = static_cast<const LogRecord &>(from_msg);
	::google::protobuf::Arena *arena = _this->GetArena();
	// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.logs.v1.LogRecord)
	ABSL_DCHECK_NE(&from, _this);
	::uint32_t cached_has_bits = 0;
	(void)cached_has_bits;

	_this->_internal_mutable_attributes()->MergeFrom(from._internal_attributes());
	if (!from._internal_severity_text().empty()) {
		_this->_internal_set_severity_text(from._internal_severity_text());
	}
	if (!from._internal_trace_id().empty()) {
		_this->_internal_set_trace_id(from._internal_trace_id());
	}
	if (!from._internal_span_id().empty()) {
		_this->_internal_set_span_id(from._internal_span_id());
	}
	cached_has_bits = from._impl_._has_bits_[0];
	if (cached_has_bits & 0x00000001u) {
		ABSL_DCHECK(from._impl_.body_ != nullptr);
		if (_this->_impl_.body_ == nullptr) {
			_this->_impl_.body_ =
			    ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::common::v1::AnyValue>(
			        arena, *from._impl_.body_);
		} else {
			_this->_impl_.body_->MergeFrom(*from._impl_.body_);
		}
	}
	if (from._internal_time_unix_nano() != 0) {
		_this->_impl_.time_unix_nano_ = from._impl_.time_unix_nano_;
	}
	if (from._internal_severity_number() != 0) {
		_this->_impl_.severity_number_ = from._impl_.severity_number_;
	}
	if (from._internal_dropped_attributes_count() != 0) {
		_this->_impl_.dropped_attributes_count_ = from._impl_.dropped_attributes_count_;
	}
	if (from._internal_observed_time_unix_nano() != 0) {
		_this->_impl_.observed_time_unix_nano_ = from._impl_.observed_time_unix_nano_;
	}
	if (from._internal_flags() != 0) {
		_this->_impl_.flags_ = from._impl_.flags_;
	}
	_this->_impl_._has_bits_[0] |= cached_has_bits;
	_this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogRecord::CopyFrom(const LogRecord &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.logs.v1.LogRecord)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void LogRecord::InternalSwap(LogRecord *PROTOBUF_RESTRICT other) {
	using std::swap;
	auto *arena = GetArena();
	ABSL_DCHECK_EQ(arena, other->GetArena());
	_internal_metadata_.InternalSwap(&other->_internal_metadata_);
	swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
	_impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
	::_pbi::ArenaStringPtr::InternalSwap(&_impl_.severity_text_, &other->_impl_.severity_text_, arena);
	::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trace_id_, &other->_impl_.trace_id_, arena);
	::_pbi::ArenaStringPtr::InternalSwap(&_impl_.span_id_, &other->_impl_.span_id_, arena);
	::google::protobuf::internal::memswap<PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.flags_) +
	                                      sizeof(LogRecord::_impl_.flags_) -
	                                      PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.body_)>(
	    reinterpret_cast<char *>(&_impl_.body_), reinterpret_cast<char *>(&other->_impl_.body_));
}

::google::protobuf::Metadata LogRecord::GetMetadata() const {
	return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
} // namespace v1
} // namespace logs
} // namespace proto
} // namespace opentelemetry
namespace google {
namespace protobuf {} // namespace protobuf
} // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type _static_init2_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto), ::std::false_type {});
#include "google/protobuf/port_undef.inc"
