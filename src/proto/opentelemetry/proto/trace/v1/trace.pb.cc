// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: opentelemetry/proto/trace/v1/trace.proto
// Protobuf C++ Version: 5.29.5

#include "opentelemetry/proto/trace/v1/trace.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace opentelemetry {
namespace proto {
namespace trace {
namespace v1 {

inline constexpr Status::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        code_{static_cast< ::opentelemetry::proto::trace::v1::Status_StatusCode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Status::Status(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;

inline constexpr Span_Link::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : attributes_{},
        trace_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        span_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        trace_state_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dropped_attributes_count_{0u},
        flags_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Span_Link::Span_Link(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Span_LinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Span_LinkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Span_LinkDefaultTypeInternal() {}
  union {
    Span_Link _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Span_LinkDefaultTypeInternal _Span_Link_default_instance_;

inline constexpr Span_Event::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : attributes_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_unix_nano_{::uint64_t{0u}},
        dropped_attributes_count_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Span_Event::Span_Event(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Span_EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Span_EventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Span_EventDefaultTypeInternal() {}
  union {
    Span_Event _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Span_EventDefaultTypeInternal _Span_Event_default_instance_;

inline constexpr Span::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attributes_{},
        events_{},
        links_{},
        trace_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        span_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        trace_state_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        parent_span_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_{nullptr},
        start_time_unix_nano_{::uint64_t{0u}},
        end_time_unix_nano_{::uint64_t{0u}},
        kind_{static_cast< ::opentelemetry::proto::trace::v1::Span_SpanKind >(0)},
        dropped_attributes_count_{0u},
        dropped_events_count_{0u},
        dropped_links_count_{0u},
        flags_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Span::Span(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SpanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanDefaultTypeInternal() {}
  union {
    Span _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanDefaultTypeInternal _Span_default_instance_;

inline constexpr ScopeSpans::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        spans_{},
        schema_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        scope_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ScopeSpans::ScopeSpans(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ScopeSpansDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScopeSpansDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScopeSpansDefaultTypeInternal() {}
  union {
    ScopeSpans _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScopeSpansDefaultTypeInternal _ScopeSpans_default_instance_;

inline constexpr ResourceSpans::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        scope_spans_{},
        schema_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        resource_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ResourceSpans::ResourceSpans(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResourceSpansDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceSpansDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceSpansDefaultTypeInternal() {}
  union {
    ResourceSpans _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceSpansDefaultTypeInternal _ResourceSpans_default_instance_;

inline constexpr TracesData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : resource_spans_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TracesData::TracesData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TracesDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TracesDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TracesDataDefaultTypeInternal() {}
  union {
    TracesData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TracesDataDefaultTypeInternal _TracesData_default_instance_;
}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opentelemetry
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto = nullptr;
const ::uint32_t
    TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::TracesData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::TracesData, _impl_.resource_spans_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::ResourceSpans, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::ResourceSpans, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::ResourceSpans, _impl_.resource_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::ResourceSpans, _impl_.scope_spans_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::ResourceSpans, _impl_.schema_url_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::ScopeSpans, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::ScopeSpans, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::ScopeSpans, _impl_.scope_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::ScopeSpans, _impl_.spans_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::ScopeSpans, _impl_.schema_url_),
        0,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Event, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Event, _impl_.time_unix_nano_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Event, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Event, _impl_.attributes_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Event, _impl_.dropped_attributes_count_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Link, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Link, _impl_.trace_id_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Link, _impl_.span_id_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Link, _impl_.trace_state_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Link, _impl_.attributes_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Link, _impl_.dropped_attributes_count_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Link, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_.trace_id_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_.span_id_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_.trace_state_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_.parent_span_id_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_.kind_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_.start_time_unix_nano_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_.end_time_unix_nano_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_.attributes_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_.dropped_attributes_count_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_.events_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_.dropped_events_count_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_.links_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_.dropped_links_count_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _impl_.status_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Status, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Status, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Status, _impl_.code_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::opentelemetry::proto::trace::v1::TracesData)},
        {9, 20, -1, sizeof(::opentelemetry::proto::trace::v1::ResourceSpans)},
        {23, 34, -1, sizeof(::opentelemetry::proto::trace::v1::ScopeSpans)},
        {37, -1, -1, sizeof(::opentelemetry::proto::trace::v1::Span_Event)},
        {49, -1, -1, sizeof(::opentelemetry::proto::trace::v1::Span_Link)},
        {63, 87, -1, sizeof(::opentelemetry::proto::trace::v1::Span)},
        {103, -1, -1, sizeof(::opentelemetry::proto::trace::v1::Status)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::opentelemetry::proto::trace::v1::_TracesData_default_instance_._instance,
    &::opentelemetry::proto::trace::v1::_ResourceSpans_default_instance_._instance,
    &::opentelemetry::proto::trace::v1::_ScopeSpans_default_instance_._instance,
    &::opentelemetry::proto::trace::v1::_Span_Event_default_instance_._instance,
    &::opentelemetry::proto::trace::v1::_Span_Link_default_instance_._instance,
    &::opentelemetry::proto::trace::v1::_Span_default_instance_._instance,
    &::opentelemetry::proto::trace::v1::_Status_default_instance_._instance,
};
const char descriptor_table_protodef_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n(opentelemetry/proto/trace/v1/trace.pro"
    "to\022\034opentelemetry.proto.trace.v1\032*opente"
    "lemetry/proto/common/v1/common.proto\032.op"
    "entelemetry/proto/resource/v1/resource.p"
    "roto\"Q\n\nTracesData\022C\n\016resource_spans\030\001 \003"
    "(\0132+.opentelemetry.proto.trace.v1.Resour"
    "ceSpans\"\247\001\n\rResourceSpans\022;\n\010resource\030\001 "
    "\001(\0132).opentelemetry.proto.resource.v1.Re"
    "source\022=\n\013scope_spans\030\002 \003(\0132(.openteleme"
    "try.proto.trace.v1.ScopeSpans\022\022\n\nschema_"
    "url\030\003 \001(\tJ\006\010\350\007\020\351\007\"\227\001\n\nScopeSpans\022B\n\005scop"
    "e\030\001 \001(\01323.opentelemetry.proto.common.v1."
    "InstrumentationScope\0221\n\005spans\030\002 \003(\0132\".op"
    "entelemetry.proto.trace.v1.Span\022\022\n\nschem"
    "a_url\030\003 \001(\t\"\204\010\n\004Span\022\020\n\010trace_id\030\001 \001(\014\022\017"
    "\n\007span_id\030\002 \001(\014\022\023\n\013trace_state\030\003 \001(\t\022\026\n\016"
    "parent_span_id\030\004 \001(\014\022\r\n\005flags\030\020 \001(\007\022\014\n\004n"
    "ame\030\005 \001(\t\0229\n\004kind\030\006 \001(\0162+.opentelemetry."
    "proto.trace.v1.Span.SpanKind\022\034\n\024start_ti"
    "me_unix_nano\030\007 \001(\006\022\032\n\022end_time_unix_nano"
    "\030\010 \001(\006\022;\n\nattributes\030\t \003(\0132\'.opentelemet"
    "ry.proto.common.v1.KeyValue\022 \n\030dropped_a"
    "ttributes_count\030\n \001(\r\0228\n\006events\030\013 \003(\0132(."
    "opentelemetry.proto.trace.v1.Span.Event\022"
    "\034\n\024dropped_events_count\030\014 \001(\r\0226\n\005links\030\r"
    " \003(\0132\'.opentelemetry.proto.trace.v1.Span"
    ".Link\022\033\n\023dropped_links_count\030\016 \001(\r\0224\n\006st"
    "atus\030\017 \001(\0132$.opentelemetry.proto.trace.v"
    "1.Status\032\214\001\n\005Event\022\026\n\016time_unix_nano\030\001 \001"
    "(\006\022\014\n\004name\030\002 \001(\t\022;\n\nattributes\030\003 \003(\0132\'.o"
    "pentelemetry.proto.common.v1.KeyValue\022 \n"
    "\030dropped_attributes_count\030\004 \001(\r\032\254\001\n\004Link"
    "\022\020\n\010trace_id\030\001 \001(\014\022\017\n\007span_id\030\002 \001(\014\022\023\n\013t"
    "race_state\030\003 \001(\t\022;\n\nattributes\030\004 \003(\0132\'.o"
    "pentelemetry.proto.common.v1.KeyValue\022 \n"
    "\030dropped_attributes_count\030\005 \001(\r\022\r\n\005flags"
    "\030\006 \001(\007\"\231\001\n\010SpanKind\022\031\n\025SPAN_KIND_UNSPECI"
    "FIED\020\000\022\026\n\022SPAN_KIND_INTERNAL\020\001\022\024\n\020SPAN_K"
    "IND_SERVER\020\002\022\024\n\020SPAN_KIND_CLIENT\020\003\022\026\n\022SP"
    "AN_KIND_PRODUCER\020\004\022\026\n\022SPAN_KIND_CONSUMER"
    "\020\005\"\256\001\n\006Status\022\017\n\007message\030\002 \001(\t\022=\n\004code\030\003"
    " \001(\0162/.opentelemetry.proto.trace.v1.Stat"
    "us.StatusCode\"N\n\nStatusCode\022\025\n\021STATUS_CO"
    "DE_UNSET\020\000\022\022\n\016STATUS_CODE_OK\020\001\022\025\n\021STATUS"
    "_CODE_ERROR\020\002J\004\010\001\020\002*\234\001\n\tSpanFlags\022\031\n\025SPA"
    "N_FLAGS_DO_NOT_USE\020\000\022 \n\033SPAN_FLAGS_TRACE"
    "_FLAGS_MASK\020\377\001\022*\n%SPAN_FLAGS_CONTEXT_HAS"
    "_IS_REMOTE_MASK\020\200\002\022&\n!SPAN_FLAGS_CONTEXT"
    "_IS_REMOTE_MASK\020\200\004Bw\n\037io.opentelemetry.p"
    "roto.trace.v1B\nTraceProtoP\001Z\'go.opentele"
    "metry.io/proto/otlp/trace/v1\252\002\034OpenTelem"
    "etry.Proto.Trace.V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto_deps[2] =
    {
        &::descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto,
};
static ::absl::once_flag descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto = {
    false,
    false,
    2067,
    descriptor_table_protodef_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto,
    "opentelemetry/proto/trace/v1/trace.proto",
    &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto_once,
    descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto_deps,
    2,
    7,
    schemas,
    file_default_instances,
    TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto::offsets,
    file_level_enum_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto,
    file_level_service_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto,
};
namespace opentelemetry {
namespace proto {
namespace trace {
namespace v1 {
const ::google::protobuf::EnumDescriptor* Span_SpanKind_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Span_SpanKind_internal_data_[] = {
    393216u, 0u, };
bool Span_SpanKind_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Span_SpanKind Span::SPAN_KIND_UNSPECIFIED;
constexpr Span_SpanKind Span::SPAN_KIND_INTERNAL;
constexpr Span_SpanKind Span::SPAN_KIND_SERVER;
constexpr Span_SpanKind Span::SPAN_KIND_CLIENT;
constexpr Span_SpanKind Span::SPAN_KIND_PRODUCER;
constexpr Span_SpanKind Span::SPAN_KIND_CONSUMER;
constexpr Span_SpanKind Span::SpanKind_MIN;
constexpr Span_SpanKind Span::SpanKind_MAX;
constexpr int Span::SpanKind_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* Status_StatusCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t Status_StatusCode_internal_data_[] = {
    196608u, 0u, };
bool Status_StatusCode_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Status_StatusCode Status::STATUS_CODE_UNSET;
constexpr Status_StatusCode Status::STATUS_CODE_OK;
constexpr Status_StatusCode Status::STATUS_CODE_ERROR;
constexpr Status_StatusCode Status::StatusCode_MIN;
constexpr Status_StatusCode Status::StatusCode_MAX;
constexpr int Status::StatusCode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* SpanFlags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t SpanFlags_internal_data_[] = {
    65536u, 196608u, 256u, 255u, 512u, };
bool SpanFlags_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, SpanFlags_internal_data_);
}
// ===================================================================

class TracesData::_Internal {
 public:
};

TracesData::TracesData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.TracesData)
}
inline PROTOBUF_NDEBUG_INLINE TracesData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::trace::v1::TracesData& from_msg)
      : resource_spans_{visibility, arena, from.resource_spans_},
        _cached_size_{0} {}

TracesData::TracesData(
    ::google::protobuf::Arena* arena,
    const TracesData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TracesData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.TracesData)
}
inline PROTOBUF_NDEBUG_INLINE TracesData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : resource_spans_{visibility, arena},
        _cached_size_{0} {}

inline void TracesData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TracesData::~TracesData() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.TracesData)
  SharedDtor(*this);
}
inline void TracesData::SharedDtor(MessageLite& self) {
  TracesData& this_ = static_cast<TracesData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* TracesData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TracesData(arena);
}
constexpr auto TracesData::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TracesData, _impl_.resource_spans_) +
          decltype(TracesData::_impl_.resource_spans_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(TracesData), alignof(TracesData), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TracesData::PlacementNew_,
                                 sizeof(TracesData),
                                 alignof(TracesData));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TracesData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TracesData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TracesData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TracesData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TracesData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TracesData>(), &TracesData::ByteSizeLong,
            &TracesData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TracesData, _impl_._cached_size_),
        false,
    },
    &TracesData::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TracesData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TracesData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::trace::v1::TracesData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .opentelemetry.proto.trace.v1.ResourceSpans resource_spans = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TracesData, _impl_.resource_spans_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .opentelemetry.proto.trace.v1.ResourceSpans resource_spans = 1;
    {PROTOBUF_FIELD_OFFSET(TracesData, _impl_.resource_spans_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::trace::v1::ResourceSpans>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TracesData::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.TracesData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_spans_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TracesData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TracesData& this_ = static_cast<const TracesData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TracesData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TracesData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.TracesData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .opentelemetry.proto.trace.v1.ResourceSpans resource_spans = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_resource_spans_size());
               i < n; i++) {
            const auto& repfield = this_._internal_resource_spans().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.TracesData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TracesData::ByteSizeLong(const MessageLite& base) {
          const TracesData& this_ = static_cast<const TracesData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TracesData::ByteSizeLong() const {
          const TracesData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.TracesData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.trace.v1.ResourceSpans resource_spans = 1;
            {
              total_size += 1UL * this_._internal_resource_spans_size();
              for (const auto& msg : this_._internal_resource_spans()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TracesData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TracesData*>(&to_msg);
  auto& from = static_cast<const TracesData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.TracesData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_resource_spans()->MergeFrom(
      from._internal_resource_spans());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TracesData::CopyFrom(const TracesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.TracesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TracesData::InternalSwap(TracesData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.resource_spans_.InternalSwap(&other->_impl_.resource_spans_);
}

::google::protobuf::Metadata TracesData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ResourceSpans::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ResourceSpans>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ResourceSpans, _impl_._has_bits_);
};

void ResourceSpans::clear_resource() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.resource_ != nullptr) _impl_.resource_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ResourceSpans::ResourceSpans(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.ResourceSpans)
}
inline PROTOBUF_NDEBUG_INLINE ResourceSpans::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::trace::v1::ResourceSpans& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        scope_spans_{visibility, arena, from.scope_spans_},
        schema_url_(arena, from.schema_url_) {}

ResourceSpans::ResourceSpans(
    ::google::protobuf::Arena* arena,
    const ResourceSpans& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ResourceSpans* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.resource_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::resource::v1::Resource>(
                              arena, *from._impl_.resource_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.ResourceSpans)
}
inline PROTOBUF_NDEBUG_INLINE ResourceSpans::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        scope_spans_{visibility, arena},
        schema_url_(arena) {}

inline void ResourceSpans::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.resource_ = {};
}
ResourceSpans::~ResourceSpans() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.ResourceSpans)
  SharedDtor(*this);
}
inline void ResourceSpans::SharedDtor(MessageLite& self) {
  ResourceSpans& this_ = static_cast<ResourceSpans&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.schema_url_.Destroy();
  delete this_._impl_.resource_;
  this_._impl_.~Impl_();
}

inline void* ResourceSpans::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ResourceSpans(arena);
}
constexpr auto ResourceSpans::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ResourceSpans, _impl_.scope_spans_) +
          decltype(ResourceSpans::_impl_.scope_spans_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ResourceSpans), alignof(ResourceSpans), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ResourceSpans::PlacementNew_,
                                 sizeof(ResourceSpans),
                                 alignof(ResourceSpans));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ResourceSpans::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ResourceSpans_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ResourceSpans::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ResourceSpans>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ResourceSpans::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ResourceSpans>(), &ResourceSpans::ByteSizeLong,
            &ResourceSpans::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ResourceSpans, _impl_._cached_size_),
        false,
    },
    &ResourceSpans::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ResourceSpans::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 61, 2> ResourceSpans::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ResourceSpans, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::trace::v1::ResourceSpans>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .opentelemetry.proto.resource.v1.Resource resource = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ResourceSpans, _impl_.resource_)}},
    // repeated .opentelemetry.proto.trace.v1.ScopeSpans scope_spans = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(ResourceSpans, _impl_.scope_spans_)}},
    // string schema_url = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceSpans, _impl_.schema_url_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .opentelemetry.proto.resource.v1.Resource resource = 1;
    {PROTOBUF_FIELD_OFFSET(ResourceSpans, _impl_.resource_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .opentelemetry.proto.trace.v1.ScopeSpans scope_spans = 2;
    {PROTOBUF_FIELD_OFFSET(ResourceSpans, _impl_.scope_spans_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string schema_url = 3;
    {PROTOBUF_FIELD_OFFSET(ResourceSpans, _impl_.schema_url_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::resource::v1::Resource>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::trace::v1::ScopeSpans>()},
  }}, {{
    "\52\0\0\12\0\0\0\0"
    "opentelemetry.proto.trace.v1.ResourceSpans"
    "schema_url"
  }},
};

PROTOBUF_NOINLINE void ResourceSpans::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.ResourceSpans)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scope_spans_.Clear();
  _impl_.schema_url_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.resource_ != nullptr);
    _impl_.resource_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ResourceSpans::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ResourceSpans& this_ = static_cast<const ResourceSpans&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ResourceSpans::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ResourceSpans& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.ResourceSpans)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .opentelemetry.proto.resource.v1.Resource resource = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.resource_, this_._impl_.resource_->GetCachedSize(), target,
                stream);
          }

          // repeated .opentelemetry.proto.trace.v1.ScopeSpans scope_spans = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_scope_spans_size());
               i < n; i++) {
            const auto& repfield = this_._internal_scope_spans().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // string schema_url = 3;
          if (!this_._internal_schema_url().empty()) {
            const std::string& _s = this_._internal_schema_url();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.trace.v1.ResourceSpans.schema_url");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.ResourceSpans)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ResourceSpans::ByteSizeLong(const MessageLite& base) {
          const ResourceSpans& this_ = static_cast<const ResourceSpans&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ResourceSpans::ByteSizeLong() const {
          const ResourceSpans& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.ResourceSpans)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.trace.v1.ScopeSpans scope_spans = 2;
            {
              total_size += 1UL * this_._internal_scope_spans_size();
              for (const auto& msg : this_._internal_scope_spans()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string schema_url = 3;
            if (!this_._internal_schema_url().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_schema_url());
            }
          }
           {
            // .opentelemetry.proto.resource.v1.Resource resource = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.resource_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ResourceSpans::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResourceSpans*>(&to_msg);
  auto& from = static_cast<const ResourceSpans&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.ResourceSpans)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_scope_spans()->MergeFrom(
      from._internal_scope_spans());
  if (!from._internal_schema_url().empty()) {
    _this->_internal_set_schema_url(from._internal_schema_url());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.resource_ != nullptr);
    if (_this->_impl_.resource_ == nullptr) {
      _this->_impl_.resource_ =
          ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::resource::v1::Resource>(arena, *from._impl_.resource_);
    } else {
      _this->_impl_.resource_->MergeFrom(*from._impl_.resource_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceSpans::CopyFrom(const ResourceSpans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.ResourceSpans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResourceSpans::InternalSwap(ResourceSpans* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.scope_spans_.InternalSwap(&other->_impl_.scope_spans_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.schema_url_, &other->_impl_.schema_url_, arena);
  swap(_impl_.resource_, other->_impl_.resource_);
}

::google::protobuf::Metadata ResourceSpans::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ScopeSpans::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ScopeSpans>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ScopeSpans, _impl_._has_bits_);
};

void ScopeSpans::clear_scope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.scope_ != nullptr) _impl_.scope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ScopeSpans::ScopeSpans(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.ScopeSpans)
}
inline PROTOBUF_NDEBUG_INLINE ScopeSpans::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::trace::v1::ScopeSpans& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        spans_{visibility, arena, from.spans_},
        schema_url_(arena, from.schema_url_) {}

ScopeSpans::ScopeSpans(
    ::google::protobuf::Arena* arena,
    const ScopeSpans& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ScopeSpans* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.scope_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::common::v1::InstrumentationScope>(
                              arena, *from._impl_.scope_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.ScopeSpans)
}
inline PROTOBUF_NDEBUG_INLINE ScopeSpans::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        spans_{visibility, arena},
        schema_url_(arena) {}

inline void ScopeSpans::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.scope_ = {};
}
ScopeSpans::~ScopeSpans() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.ScopeSpans)
  SharedDtor(*this);
}
inline void ScopeSpans::SharedDtor(MessageLite& self) {
  ScopeSpans& this_ = static_cast<ScopeSpans&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.schema_url_.Destroy();
  delete this_._impl_.scope_;
  this_._impl_.~Impl_();
}

inline void* ScopeSpans::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ScopeSpans(arena);
}
constexpr auto ScopeSpans::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ScopeSpans, _impl_.spans_) +
          decltype(ScopeSpans::_impl_.spans_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ScopeSpans), alignof(ScopeSpans), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ScopeSpans::PlacementNew_,
                                 sizeof(ScopeSpans),
                                 alignof(ScopeSpans));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ScopeSpans::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ScopeSpans_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ScopeSpans::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ScopeSpans>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ScopeSpans::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ScopeSpans>(), &ScopeSpans::ByteSizeLong,
            &ScopeSpans::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ScopeSpans, _impl_._cached_size_),
        false,
    },
    &ScopeSpans::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ScopeSpans::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 58, 2> ScopeSpans::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ScopeSpans, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::trace::v1::ScopeSpans>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ScopeSpans, _impl_.scope_)}},
    // repeated .opentelemetry.proto.trace.v1.Span spans = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(ScopeSpans, _impl_.spans_)}},
    // string schema_url = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ScopeSpans, _impl_.schema_url_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
    {PROTOBUF_FIELD_OFFSET(ScopeSpans, _impl_.scope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .opentelemetry.proto.trace.v1.Span spans = 2;
    {PROTOBUF_FIELD_OFFSET(ScopeSpans, _impl_.spans_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string schema_url = 3;
    {PROTOBUF_FIELD_OFFSET(ScopeSpans, _impl_.schema_url_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::InstrumentationScope>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::trace::v1::Span>()},
  }}, {{
    "\47\0\0\12\0\0\0\0"
    "opentelemetry.proto.trace.v1.ScopeSpans"
    "schema_url"
  }},
};

PROTOBUF_NOINLINE void ScopeSpans::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.ScopeSpans)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spans_.Clear();
  _impl_.schema_url_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.scope_ != nullptr);
    _impl_.scope_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ScopeSpans::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ScopeSpans& this_ = static_cast<const ScopeSpans&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ScopeSpans::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ScopeSpans& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.ScopeSpans)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.scope_, this_._impl_.scope_->GetCachedSize(), target,
                stream);
          }

          // repeated .opentelemetry.proto.trace.v1.Span spans = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_spans_size());
               i < n; i++) {
            const auto& repfield = this_._internal_spans().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // string schema_url = 3;
          if (!this_._internal_schema_url().empty()) {
            const std::string& _s = this_._internal_schema_url();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.trace.v1.ScopeSpans.schema_url");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.ScopeSpans)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ScopeSpans::ByteSizeLong(const MessageLite& base) {
          const ScopeSpans& this_ = static_cast<const ScopeSpans&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ScopeSpans::ByteSizeLong() const {
          const ScopeSpans& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.ScopeSpans)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.trace.v1.Span spans = 2;
            {
              total_size += 1UL * this_._internal_spans_size();
              for (const auto& msg : this_._internal_spans()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string schema_url = 3;
            if (!this_._internal_schema_url().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_schema_url());
            }
          }
           {
            // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.scope_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ScopeSpans::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ScopeSpans*>(&to_msg);
  auto& from = static_cast<const ScopeSpans&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.ScopeSpans)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_spans()->MergeFrom(
      from._internal_spans());
  if (!from._internal_schema_url().empty()) {
    _this->_internal_set_schema_url(from._internal_schema_url());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.scope_ != nullptr);
    if (_this->_impl_.scope_ == nullptr) {
      _this->_impl_.scope_ =
          ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::common::v1::InstrumentationScope>(arena, *from._impl_.scope_);
    } else {
      _this->_impl_.scope_->MergeFrom(*from._impl_.scope_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ScopeSpans::CopyFrom(const ScopeSpans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.ScopeSpans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ScopeSpans::InternalSwap(ScopeSpans* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.spans_.InternalSwap(&other->_impl_.spans_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.schema_url_, &other->_impl_.schema_url_, arena);
  swap(_impl_.scope_, other->_impl_.scope_);
}

::google::protobuf::Metadata ScopeSpans::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Span_Event::_Internal {
 public:
};

void Span_Event::clear_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attributes_.Clear();
}
Span_Event::Span_Event(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.Span.Event)
}
inline PROTOBUF_NDEBUG_INLINE Span_Event::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::trace::v1::Span_Event& from_msg)
      : attributes_{visibility, arena, from.attributes_},
        name_(arena, from.name_),
        _cached_size_{0} {}

Span_Event::Span_Event(
    ::google::protobuf::Arena* arena,
    const Span_Event& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Span_Event* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_unix_nano_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, time_unix_nano_),
           offsetof(Impl_, dropped_attributes_count_) -
               offsetof(Impl_, time_unix_nano_) +
               sizeof(Impl_::dropped_attributes_count_));

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.Span.Event)
}
inline PROTOBUF_NDEBUG_INLINE Span_Event::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : attributes_{visibility, arena},
        name_(arena),
        _cached_size_{0} {}

inline void Span_Event::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_unix_nano_),
           0,
           offsetof(Impl_, dropped_attributes_count_) -
               offsetof(Impl_, time_unix_nano_) +
               sizeof(Impl_::dropped_attributes_count_));
}
Span_Event::~Span_Event() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.Span.Event)
  SharedDtor(*this);
}
inline void Span_Event::SharedDtor(MessageLite& self) {
  Span_Event& this_ = static_cast<Span_Event&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Span_Event::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Span_Event(arena);
}
constexpr auto Span_Event::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Span_Event, _impl_.attributes_) +
          decltype(Span_Event::_impl_.attributes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Span_Event), alignof(Span_Event), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Span_Event::PlacementNew_,
                                 sizeof(Span_Event),
                                 alignof(Span_Event));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Span_Event::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Span_Event_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Span_Event::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Span_Event>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Span_Event::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Span_Event>(), &Span_Event::ByteSizeLong,
            &Span_Event::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Span_Event, _impl_._cached_size_),
        false,
    },
    &Span_Event::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Span_Event::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 52, 2> Span_Event::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::trace::v1::Span_Event>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 dropped_attributes_count = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Span_Event, _impl_.dropped_attributes_count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Span_Event, _impl_.dropped_attributes_count_)}},
    // fixed64 time_unix_nano = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Span_Event, _impl_.time_unix_nano_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Span_Event, _impl_.name_)}},
    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Span_Event, _impl_.attributes_)}},
  }}, {{
    65535, 65535
  }}, {{
    // fixed64 time_unix_nano = 1;
    {PROTOBUF_FIELD_OFFSET(Span_Event, _impl_.time_unix_nano_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(Span_Event, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
    {PROTOBUF_FIELD_OFFSET(Span_Event, _impl_.attributes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 dropped_attributes_count = 4;
    {PROTOBUF_FIELD_OFFSET(Span_Event, _impl_.dropped_attributes_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::KeyValue>()},
  }}, {{
    "\47\0\4\0\0\0\0\0"
    "opentelemetry.proto.trace.v1.Span.Event"
    "name"
  }},
};

PROTOBUF_NOINLINE void Span_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.Span.Event)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.time_unix_nano_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.dropped_attributes_count_) -
      reinterpret_cast<char*>(&_impl_.time_unix_nano_)) + sizeof(_impl_.dropped_attributes_count_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Span_Event::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Span_Event& this_ = static_cast<const Span_Event&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Span_Event::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Span_Event& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.Span.Event)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // fixed64 time_unix_nano = 1;
          if (this_._internal_time_unix_nano() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                1, this_._internal_time_unix_nano(), target);
          }

          // string name = 2;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.trace.v1.Span.Event.name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_attributes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_attributes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // uint32 dropped_attributes_count = 4;
          if (this_._internal_dropped_attributes_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                4, this_._internal_dropped_attributes_count(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.Span.Event)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Span_Event::ByteSizeLong(const MessageLite& base) {
          const Span_Event& this_ = static_cast<const Span_Event&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Span_Event::ByteSizeLong() const {
          const Span_Event& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.Span.Event)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
            {
              total_size += 1UL * this_._internal_attributes_size();
              for (const auto& msg : this_._internal_attributes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string name = 2;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // fixed64 time_unix_nano = 1;
            if (this_._internal_time_unix_nano() != 0) {
              total_size += 9;
            }
            // uint32 dropped_attributes_count = 4;
            if (this_._internal_dropped_attributes_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_dropped_attributes_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Span_Event::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Span_Event*>(&to_msg);
  auto& from = static_cast<const Span_Event&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.Span.Event)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_attributes()->MergeFrom(
      from._internal_attributes());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_time_unix_nano() != 0) {
    _this->_impl_.time_unix_nano_ = from._impl_.time_unix_nano_;
  }
  if (from._internal_dropped_attributes_count() != 0) {
    _this->_impl_.dropped_attributes_count_ = from._impl_.dropped_attributes_count_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Span_Event::CopyFrom(const Span_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.Span.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Span_Event::InternalSwap(Span_Event* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Span_Event, _impl_.dropped_attributes_count_)
      + sizeof(Span_Event::_impl_.dropped_attributes_count_)
      - PROTOBUF_FIELD_OFFSET(Span_Event, _impl_.time_unix_nano_)>(
          reinterpret_cast<char*>(&_impl_.time_unix_nano_),
          reinterpret_cast<char*>(&other->_impl_.time_unix_nano_));
}

::google::protobuf::Metadata Span_Event::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Span_Link::_Internal {
 public:
};

void Span_Link::clear_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attributes_.Clear();
}
Span_Link::Span_Link(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.Span.Link)
}
inline PROTOBUF_NDEBUG_INLINE Span_Link::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::trace::v1::Span_Link& from_msg)
      : attributes_{visibility, arena, from.attributes_},
        trace_id_(arena, from.trace_id_),
        span_id_(arena, from.span_id_),
        trace_state_(arena, from.trace_state_),
        _cached_size_{0} {}

Span_Link::Span_Link(
    ::google::protobuf::Arena* arena,
    const Span_Link& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Span_Link* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, dropped_attributes_count_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, dropped_attributes_count_),
           offsetof(Impl_, flags_) -
               offsetof(Impl_, dropped_attributes_count_) +
               sizeof(Impl_::flags_));

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.Span.Link)
}
inline PROTOBUF_NDEBUG_INLINE Span_Link::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : attributes_{visibility, arena},
        trace_id_(arena),
        span_id_(arena),
        trace_state_(arena),
        _cached_size_{0} {}

inline void Span_Link::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, dropped_attributes_count_),
           0,
           offsetof(Impl_, flags_) -
               offsetof(Impl_, dropped_attributes_count_) +
               sizeof(Impl_::flags_));
}
Span_Link::~Span_Link() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.Span.Link)
  SharedDtor(*this);
}
inline void Span_Link::SharedDtor(MessageLite& self) {
  Span_Link& this_ = static_cast<Span_Link&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.trace_id_.Destroy();
  this_._impl_.span_id_.Destroy();
  this_._impl_.trace_state_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Span_Link::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Span_Link(arena);
}
constexpr auto Span_Link::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Span_Link, _impl_.attributes_) +
          decltype(Span_Link::_impl_.attributes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Span_Link), alignof(Span_Link), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Span_Link::PlacementNew_,
                                 sizeof(Span_Link),
                                 alignof(Span_Link));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Span_Link::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Span_Link_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Span_Link::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Span_Link>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Span_Link::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Span_Link>(), &Span_Link::ByteSizeLong,
            &Span_Link::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Span_Link, _impl_._cached_size_),
        false,
    },
    &Span_Link::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Span_Link::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 58, 2> Span_Link::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::trace::v1::Span_Link>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bytes trace_id = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Span_Link, _impl_.trace_id_)}},
    // bytes span_id = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Span_Link, _impl_.span_id_)}},
    // string trace_state = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Span_Link, _impl_.trace_state_)}},
    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Span_Link, _impl_.attributes_)}},
    // uint32 dropped_attributes_count = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Span_Link, _impl_.dropped_attributes_count_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Span_Link, _impl_.dropped_attributes_count_)}},
    // fixed32 flags = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(Span_Link, _impl_.flags_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes trace_id = 1;
    {PROTOBUF_FIELD_OFFSET(Span_Link, _impl_.trace_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes span_id = 2;
    {PROTOBUF_FIELD_OFFSET(Span_Link, _impl_.span_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string trace_state = 3;
    {PROTOBUF_FIELD_OFFSET(Span_Link, _impl_.trace_state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;
    {PROTOBUF_FIELD_OFFSET(Span_Link, _impl_.attributes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 dropped_attributes_count = 5;
    {PROTOBUF_FIELD_OFFSET(Span_Link, _impl_.dropped_attributes_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // fixed32 flags = 6;
    {PROTOBUF_FIELD_OFFSET(Span_Link, _impl_.flags_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::KeyValue>()},
  }}, {{
    "\46\0\0\13\0\0\0\0"
    "opentelemetry.proto.trace.v1.Span.Link"
    "trace_state"
  }},
};

PROTOBUF_NOINLINE void Span_Link::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.Span.Link)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.trace_id_.ClearToEmpty();
  _impl_.span_id_.ClearToEmpty();
  _impl_.trace_state_.ClearToEmpty();
  ::memset(&_impl_.dropped_attributes_count_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.dropped_attributes_count_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Span_Link::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Span_Link& this_ = static_cast<const Span_Link&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Span_Link::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Span_Link& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.Span.Link)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes trace_id = 1;
          if (!this_._internal_trace_id().empty()) {
            const std::string& _s = this_._internal_trace_id();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          // bytes span_id = 2;
          if (!this_._internal_span_id().empty()) {
            const std::string& _s = this_._internal_span_id();
            target = stream->WriteBytesMaybeAliased(2, _s, target);
          }

          // string trace_state = 3;
          if (!this_._internal_trace_state().empty()) {
            const std::string& _s = this_._internal_trace_state();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.trace.v1.Span.Link.trace_state");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_attributes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_attributes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // uint32 dropped_attributes_count = 5;
          if (this_._internal_dropped_attributes_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                5, this_._internal_dropped_attributes_count(), target);
          }

          // fixed32 flags = 6;
          if (this_._internal_flags() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                6, this_._internal_flags(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.Span.Link)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Span_Link::ByteSizeLong(const MessageLite& base) {
          const Span_Link& this_ = static_cast<const Span_Link&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Span_Link::ByteSizeLong() const {
          const Span_Link& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.Span.Link)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;
            {
              total_size += 1UL * this_._internal_attributes_size();
              for (const auto& msg : this_._internal_attributes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // bytes trace_id = 1;
            if (!this_._internal_trace_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_trace_id());
            }
            // bytes span_id = 2;
            if (!this_._internal_span_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_span_id());
            }
            // string trace_state = 3;
            if (!this_._internal_trace_state().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_trace_state());
            }
            // uint32 dropped_attributes_count = 5;
            if (this_._internal_dropped_attributes_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_dropped_attributes_count());
            }
            // fixed32 flags = 6;
            if (this_._internal_flags() != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Span_Link::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Span_Link*>(&to_msg);
  auto& from = static_cast<const Span_Link&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.Span.Link)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_attributes()->MergeFrom(
      from._internal_attributes());
  if (!from._internal_trace_id().empty()) {
    _this->_internal_set_trace_id(from._internal_trace_id());
  }
  if (!from._internal_span_id().empty()) {
    _this->_internal_set_span_id(from._internal_span_id());
  }
  if (!from._internal_trace_state().empty()) {
    _this->_internal_set_trace_state(from._internal_trace_state());
  }
  if (from._internal_dropped_attributes_count() != 0) {
    _this->_impl_.dropped_attributes_count_ = from._impl_.dropped_attributes_count_;
  }
  if (from._internal_flags() != 0) {
    _this->_impl_.flags_ = from._impl_.flags_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Span_Link::CopyFrom(const Span_Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.Span.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Span_Link::InternalSwap(Span_Link* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trace_id_, &other->_impl_.trace_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.span_id_, &other->_impl_.span_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trace_state_, &other->_impl_.trace_state_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Span_Link, _impl_.flags_)
      + sizeof(Span_Link::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(Span_Link, _impl_.dropped_attributes_count_)>(
          reinterpret_cast<char*>(&_impl_.dropped_attributes_count_),
          reinterpret_cast<char*>(&other->_impl_.dropped_attributes_count_));
}

::google::protobuf::Metadata Span_Link::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Span::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Span>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Span, _impl_._has_bits_);
};

void Span::clear_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attributes_.Clear();
}
Span::Span(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.Span)
}
inline PROTOBUF_NDEBUG_INLINE Span::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::trace::v1::Span& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        attributes_{visibility, arena, from.attributes_},
        events_{visibility, arena, from.events_},
        links_{visibility, arena, from.links_},
        trace_id_(arena, from.trace_id_),
        span_id_(arena, from.span_id_),
        trace_state_(arena, from.trace_state_),
        parent_span_id_(arena, from.parent_span_id_),
        name_(arena, from.name_) {}

Span::Span(
    ::google::protobuf::Arena* arena,
    const Span& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Span* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.status_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::trace::v1::Status>(
                              arena, *from._impl_.status_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_unix_nano_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_time_unix_nano_),
           offsetof(Impl_, flags_) -
               offsetof(Impl_, start_time_unix_nano_) +
               sizeof(Impl_::flags_));

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.Span)
}
inline PROTOBUF_NDEBUG_INLINE Span::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        attributes_{visibility, arena},
        events_{visibility, arena},
        links_{visibility, arena},
        trace_id_(arena),
        span_id_(arena),
        trace_state_(arena),
        parent_span_id_(arena),
        name_(arena) {}

inline void Span::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, status_),
           0,
           offsetof(Impl_, flags_) -
               offsetof(Impl_, status_) +
               sizeof(Impl_::flags_));
}
Span::~Span() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.Span)
  SharedDtor(*this);
}
inline void Span::SharedDtor(MessageLite& self) {
  Span& this_ = static_cast<Span&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.trace_id_.Destroy();
  this_._impl_.span_id_.Destroy();
  this_._impl_.trace_state_.Destroy();
  this_._impl_.parent_span_id_.Destroy();
  this_._impl_.name_.Destroy();
  delete this_._impl_.status_;
  this_._impl_.~Impl_();
}

inline void* Span::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Span(arena);
}
constexpr auto Span::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Span, _impl_.attributes_) +
          decltype(Span::_impl_.attributes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Span, _impl_.events_) +
          decltype(Span::_impl_.events_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Span, _impl_.links_) +
          decltype(Span::_impl_.links_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Span), alignof(Span), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Span::PlacementNew_,
                                 sizeof(Span),
                                 alignof(Span));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Span::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Span_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Span::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Span>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Span::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Span>(), &Span::ByteSizeLong,
            &Span::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Span, _impl_._cached_size_),
        false,
    },
    &Span::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Span::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 4, 73, 2> Span::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Span, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::trace::v1::Span>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // fixed32 flags = 16;
    {::_pbi::TcParser::FastF32S2,
     {389, 63, 0, PROTOBUF_FIELD_OFFSET(Span, _impl_.flags_)}},
    // bytes trace_id = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Span, _impl_.trace_id_)}},
    // bytes span_id = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Span, _impl_.span_id_)}},
    // string trace_state = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Span, _impl_.trace_state_)}},
    // bytes parent_span_id = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Span, _impl_.parent_span_id_)}},
    // string name = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Span, _impl_.name_)}},
    // .opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Span, _impl_.kind_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Span, _impl_.kind_)}},
    // fixed64 start_time_unix_nano = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(Span, _impl_.start_time_unix_nano_)}},
    // fixed64 end_time_unix_nano = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(Span, _impl_.end_time_unix_nano_)}},
    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(Span, _impl_.attributes_)}},
    // uint32 dropped_attributes_count = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Span, _impl_.dropped_attributes_count_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(Span, _impl_.dropped_attributes_count_)}},
    // repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;
    {::_pbi::TcParser::FastMtR1,
     {90, 63, 1, PROTOBUF_FIELD_OFFSET(Span, _impl_.events_)}},
    // uint32 dropped_events_count = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Span, _impl_.dropped_events_count_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(Span, _impl_.dropped_events_count_)}},
    // repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;
    {::_pbi::TcParser::FastMtR1,
     {106, 63, 2, PROTOBUF_FIELD_OFFSET(Span, _impl_.links_)}},
    // uint32 dropped_links_count = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Span, _impl_.dropped_links_count_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(Span, _impl_.dropped_links_count_)}},
    // .opentelemetry.proto.trace.v1.Status status = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 0, 3, PROTOBUF_FIELD_OFFSET(Span, _impl_.status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes trace_id = 1;
    {PROTOBUF_FIELD_OFFSET(Span, _impl_.trace_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes span_id = 2;
    {PROTOBUF_FIELD_OFFSET(Span, _impl_.span_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string trace_state = 3;
    {PROTOBUF_FIELD_OFFSET(Span, _impl_.trace_state_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes parent_span_id = 4;
    {PROTOBUF_FIELD_OFFSET(Span, _impl_.parent_span_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string name = 5;
    {PROTOBUF_FIELD_OFFSET(Span, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;
    {PROTOBUF_FIELD_OFFSET(Span, _impl_.kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // fixed64 start_time_unix_nano = 7;
    {PROTOBUF_FIELD_OFFSET(Span, _impl_.start_time_unix_nano_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // fixed64 end_time_unix_nano = 8;
    {PROTOBUF_FIELD_OFFSET(Span, _impl_.end_time_unix_nano_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
    {PROTOBUF_FIELD_OFFSET(Span, _impl_.attributes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 dropped_attributes_count = 10;
    {PROTOBUF_FIELD_OFFSET(Span, _impl_.dropped_attributes_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;
    {PROTOBUF_FIELD_OFFSET(Span, _impl_.events_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 dropped_events_count = 12;
    {PROTOBUF_FIELD_OFFSET(Span, _impl_.dropped_events_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;
    {PROTOBUF_FIELD_OFFSET(Span, _impl_.links_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 dropped_links_count = 14;
    {PROTOBUF_FIELD_OFFSET(Span, _impl_.dropped_links_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .opentelemetry.proto.trace.v1.Status status = 15;
    {PROTOBUF_FIELD_OFFSET(Span, _impl_.status_), _Internal::kHasBitsOffset + 0, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // fixed32 flags = 16;
    {PROTOBUF_FIELD_OFFSET(Span, _impl_.flags_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::KeyValue>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::trace::v1::Span_Event>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::trace::v1::Span_Link>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::trace::v1::Status>()},
  }}, {{
    "\41\0\0\13\0\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "opentelemetry.proto.trace.v1.Span"
    "trace_state"
    "name"
  }},
};

PROTOBUF_NOINLINE void Span::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.Span)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.events_.Clear();
  _impl_.links_.Clear();
  _impl_.trace_id_.ClearToEmpty();
  _impl_.span_id_.ClearToEmpty();
  _impl_.trace_state_.ClearToEmpty();
  _impl_.parent_span_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  ::memset(&_impl_.start_time_unix_nano_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.start_time_unix_nano_)) + sizeof(_impl_.flags_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Span::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Span& this_ = static_cast<const Span&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Span::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Span& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.Span)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes trace_id = 1;
          if (!this_._internal_trace_id().empty()) {
            const std::string& _s = this_._internal_trace_id();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          // bytes span_id = 2;
          if (!this_._internal_span_id().empty()) {
            const std::string& _s = this_._internal_span_id();
            target = stream->WriteBytesMaybeAliased(2, _s, target);
          }

          // string trace_state = 3;
          if (!this_._internal_trace_state().empty()) {
            const std::string& _s = this_._internal_trace_state();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.trace.v1.Span.trace_state");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // bytes parent_span_id = 4;
          if (!this_._internal_parent_span_id().empty()) {
            const std::string& _s = this_._internal_parent_span_id();
            target = stream->WriteBytesMaybeAliased(4, _s, target);
          }

          // string name = 5;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.trace.v1.Span.name");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // .opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;
          if (this_._internal_kind() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_kind(), target);
          }

          // fixed64 start_time_unix_nano = 7;
          if (this_._internal_start_time_unix_nano() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                7, this_._internal_start_time_unix_nano(), target);
          }

          // fixed64 end_time_unix_nano = 8;
          if (this_._internal_end_time_unix_nano() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                8, this_._internal_end_time_unix_nano(), target);
          }

          // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_attributes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_attributes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    9, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // uint32 dropped_attributes_count = 10;
          if (this_._internal_dropped_attributes_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                10, this_._internal_dropped_attributes_count(), target);
          }

          // repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_events_size());
               i < n; i++) {
            const auto& repfield = this_._internal_events().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    11, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // uint32 dropped_events_count = 12;
          if (this_._internal_dropped_events_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                12, this_._internal_dropped_events_count(), target);
          }

          // repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_links_size());
               i < n; i++) {
            const auto& repfield = this_._internal_links().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    13, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // uint32 dropped_links_count = 14;
          if (this_._internal_dropped_links_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                14, this_._internal_dropped_links_count(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .opentelemetry.proto.trace.v1.Status status = 15;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                15, *this_._impl_.status_, this_._impl_.status_->GetCachedSize(), target,
                stream);
          }

          // fixed32 flags = 16;
          if (this_._internal_flags() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                16, this_._internal_flags(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.Span)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Span::ByteSizeLong(const MessageLite& base) {
          const Span& this_ = static_cast<const Span&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Span::ByteSizeLong() const {
          const Span& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.Span)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
            {
              total_size += 1UL * this_._internal_attributes_size();
              for (const auto& msg : this_._internal_attributes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;
            {
              total_size += 1UL * this_._internal_events_size();
              for (const auto& msg : this_._internal_events()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;
            {
              total_size += 1UL * this_._internal_links_size();
              for (const auto& msg : this_._internal_links()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // bytes trace_id = 1;
            if (!this_._internal_trace_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_trace_id());
            }
            // bytes span_id = 2;
            if (!this_._internal_span_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_span_id());
            }
            // string trace_state = 3;
            if (!this_._internal_trace_state().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_trace_state());
            }
            // bytes parent_span_id = 4;
            if (!this_._internal_parent_span_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_parent_span_id());
            }
            // string name = 5;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
           {
            // .opentelemetry.proto.trace.v1.Status status = 15;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.status_);
            }
          }
           {
            // fixed64 start_time_unix_nano = 7;
            if (this_._internal_start_time_unix_nano() != 0) {
              total_size += 9;
            }
            // fixed64 end_time_unix_nano = 8;
            if (this_._internal_end_time_unix_nano() != 0) {
              total_size += 9;
            }
            // .opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;
            if (this_._internal_kind() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_kind());
            }
            // uint32 dropped_attributes_count = 10;
            if (this_._internal_dropped_attributes_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_dropped_attributes_count());
            }
            // uint32 dropped_events_count = 12;
            if (this_._internal_dropped_events_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_dropped_events_count());
            }
            // uint32 dropped_links_count = 14;
            if (this_._internal_dropped_links_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_dropped_links_count());
            }
            // fixed32 flags = 16;
            if (this_._internal_flags() != 0) {
              total_size += 6;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Span::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Span*>(&to_msg);
  auto& from = static_cast<const Span&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.Span)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_attributes()->MergeFrom(
      from._internal_attributes());
  _this->_internal_mutable_events()->MergeFrom(
      from._internal_events());
  _this->_internal_mutable_links()->MergeFrom(
      from._internal_links());
  if (!from._internal_trace_id().empty()) {
    _this->_internal_set_trace_id(from._internal_trace_id());
  }
  if (!from._internal_span_id().empty()) {
    _this->_internal_set_span_id(from._internal_span_id());
  }
  if (!from._internal_trace_state().empty()) {
    _this->_internal_set_trace_state(from._internal_trace_state());
  }
  if (!from._internal_parent_span_id().empty()) {
    _this->_internal_set_parent_span_id(from._internal_parent_span_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.status_ != nullptr);
    if (_this->_impl_.status_ == nullptr) {
      _this->_impl_.status_ =
          ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::trace::v1::Status>(arena, *from._impl_.status_);
    } else {
      _this->_impl_.status_->MergeFrom(*from._impl_.status_);
    }
  }
  if (from._internal_start_time_unix_nano() != 0) {
    _this->_impl_.start_time_unix_nano_ = from._impl_.start_time_unix_nano_;
  }
  if (from._internal_end_time_unix_nano() != 0) {
    _this->_impl_.end_time_unix_nano_ = from._impl_.end_time_unix_nano_;
  }
  if (from._internal_kind() != 0) {
    _this->_impl_.kind_ = from._impl_.kind_;
  }
  if (from._internal_dropped_attributes_count() != 0) {
    _this->_impl_.dropped_attributes_count_ = from._impl_.dropped_attributes_count_;
  }
  if (from._internal_dropped_events_count() != 0) {
    _this->_impl_.dropped_events_count_ = from._impl_.dropped_events_count_;
  }
  if (from._internal_dropped_links_count() != 0) {
    _this->_impl_.dropped_links_count_ = from._impl_.dropped_links_count_;
  }
  if (from._internal_flags() != 0) {
    _this->_impl_.flags_ = from._impl_.flags_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Span::CopyFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Span::InternalSwap(Span* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  _impl_.links_.InternalSwap(&other->_impl_.links_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trace_id_, &other->_impl_.trace_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.span_id_, &other->_impl_.span_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trace_state_, &other->_impl_.trace_state_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.parent_span_id_, &other->_impl_.parent_span_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Span, _impl_.flags_)
      + sizeof(Span::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(Span, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::google::protobuf::Metadata Span::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.Status)
}
inline PROTOBUF_NDEBUG_INLINE Status::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::trace::v1::Status& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

Status::Status(
    ::google::protobuf::Arena* arena,
    const Status& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Status* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.code_ = from._impl_.code_;

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.Status)
}
inline PROTOBUF_NDEBUG_INLINE Status::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void Status::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.code_ = {};
}
Status::~Status() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.Status)
  SharedDtor(*this);
}
inline void Status::SharedDtor(MessageLite& self) {
  Status& this_ = static_cast<Status&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Status::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Status(arena);
}
constexpr auto Status::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Status),
                                            alignof(Status));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Status::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Status_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Status::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Status>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Status::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Status>(), &Status::ByteSizeLong,
            &Status::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Status, _impl_._cached_size_),
        false,
    },
    &Status::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Status::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 51, 2> Status::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967289,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::trace::v1::Status>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Status, _impl_.message_)}},
    // .opentelemetry.proto.trace.v1.Status.StatusCode code = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Status, _impl_.code_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Status, _impl_.code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .opentelemetry.proto.trace.v1.Status.StatusCode code = 3;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\43\7\0\0\0\0\0\0"
    "opentelemetry.proto.trace.v1.Status"
    "message"
  }},
};

PROTOBUF_NOINLINE void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.Status)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Status::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Status& this_ = static_cast<const Status&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Status::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Status& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.Status)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string message = 2;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.trace.v1.Status.message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .opentelemetry.proto.trace.v1.Status.StatusCode code = 3;
          if (this_._internal_code() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_code(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.Status)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Status::ByteSizeLong(const MessageLite& base) {
          const Status& this_ = static_cast<const Status&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Status::ByteSizeLong() const {
          const Status& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.Status)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 2;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // .opentelemetry.proto.trace.v1.Status.StatusCode code = 3;
            if (this_._internal_code() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_code());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Status::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Status*>(&to_msg);
  auto& from = static_cast<const Status&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.Status)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _this->_impl_.code_ = from._impl_.code_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Status::InternalSwap(Status* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  swap(_impl_.code_, other->_impl_.code_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opentelemetry
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
