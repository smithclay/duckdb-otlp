extension:
  name: duckspan
  description: Query OpenTelemetry data with SQL - OTLP streams and files with ClickHouse-compatible schemas
  version: 0.1.0
  language: C++
  build: cmake
  license: MIT
  excluded_platforms: "wasm_mvp;wasm_eh;wasm_threads"
  maintainers:
    - smithclay

repo:
  github: smithclay/quackspan
  ref: 552ddb1a6680eafd8ac3151e1ae3da4e0bfaa643

docs:
  hello_world: |
    -- Load the extension
    LOAD duckspan;

    -- Attach live OTLP stream (starts gRPC receiver on port 4317)
    ATTACH 'otlp:localhost:4317' AS live (TYPE otlp);

    -- Query traces with strongly-typed columns
    SELECT TraceId, SpanName, ServiceName, Duration
    FROM live.otel_traces
    WHERE Duration > 1000000000
    LIMIT 10;

    -- Query metrics by type
    SELECT Timestamp, ServiceName, MetricName, Value
    FROM live.otel_metrics_gauge
    ORDER BY Timestamp DESC;

    -- Query logs with severity filtering
    SELECT Timestamp, SeverityText, Body, ServiceName
    FROM live.otel_logs
    WHERE SeverityText = 'ERROR';

    -- Read OTLP files (JSON or protobuf, auto-detected)
    SELECT * FROM read_otlp_traces('traces.jsonl');
    SELECT * FROM read_otlp_metrics('s3://bucket/metrics/*.pb');

    -- Stop receiver and cleanup
    DETACH live;

  extended_description: |
    # duckspan - OpenTelemetry for DuckDB

    Query OpenTelemetry data with SQL using ClickHouse-compatible strongly-typed schemas.

    ## Features

    **Live OTLP Streams**
    - `ATTACH 'otlp:host:port'` creates a gRPC receiver for OpenTelemetry Protocol data
    - Auto-creates 7 ClickHouse-compatible tables per attached database:
      - `otel_traces` - 22 strongly-typed columns for distributed traces
      - `otel_logs` - 15 columns for structured logs
      - `otel_metrics_gauge`, `otel_metrics_sum`, `otel_metrics_histogram`, `otel_metrics_exp_histogram`, `otel_metrics_summary` - 5 separate tables for different metric types
    - OpenTelemetry SDKs send data via gRPC â†’ DuckDB accumulates it in memory
    - `DETACH` stops receiver and removes the database

    **File Reading**
    - Three table functions: `read_otlp_traces()`, `read_otlp_logs()`, `read_otlp_metrics()`
    - Auto-detects JSON (`.json`, `.jsonl`) and protobuf (`.pb`) formats
    - Works with DuckDB's file systems: local, S3, HTTP, Azure, GCS
    - Same strongly-typed schema as attached tables

    **Strongly-Typed Schemas**
    - No JSON extraction required - all fields are proper DuckDB columns
    - Direct access: `ServiceName`, `TraceId`, `Duration`, `Value`, etc.
    - Compatible with OpenTelemetry ClickHouse exporter schema
    - Efficient filtering and aggregation on typed columns

    ## Use Cases

    - **Observability Analysis**: Query traces, logs, and metrics with SQL
    - **OTLP File Processing**: Read and analyze OTLP export files
    - **Data Pipeline Testing**: Validate telemetry data before shipping to production
    - **Local Development**: Collect and inspect OpenTelemetry data during development
    - **Data Transformation**: Export to Parquet, CSV, or other DuckDB-supported formats

    ## Architecture

    - **Storage Extension**: Registered for `TYPE otlp`, handles ATTACH/DETACH lifecycle
    - **gRPC Receiver**: Implements OpenTelemetry Collector Protocol endpoints
    - **In-Memory Buffers**: Ring buffers store data with FIFO eviction
    - **Format Detection**: Automatic JSON vs protobuf detection for file reading

    ## Limitations

    - Data is stored in memory only (no persistent storage)
    - Manual cleanup required via `DELETE` or periodic `DETACH`/re-`ATTACH`
    - One gRPC receiver per port (one ATTACH per unique port)

    ## References

    - [OpenTelemetry Protocol (OTLP)](https://opentelemetry.io/docs/specs/otlp/)
    - [OpenTelemetry ClickHouse Exporter](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/clickhouseexporter)
